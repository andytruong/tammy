// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"tammy/ent/portal"
	"tammy/ent/portalmetadata"
	"tammy/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PortalMetadataUpdate is the builder for updating PortalMetadata entities.
type PortalMetadataUpdate struct {
	config
	hooks    []Hook
	mutation *PortalMetadataMutation
}

// Where appends a list predicates to the PortalMetadataUpdate builder.
func (pmu *PortalMetadataUpdate) Where(ps ...predicate.PortalMetadata) *PortalMetadataUpdate {
	pmu.mutation.Where(ps...)
	return pmu
}

// SetKind sets the "kind" field.
func (pmu *PortalMetadataUpdate) SetKind(po portalmetadata.Kind) *PortalMetadataUpdate {
	pmu.mutation.SetKind(po)
	return pmu
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (pmu *PortalMetadataUpdate) SetNillableKind(po *portalmetadata.Kind) *PortalMetadataUpdate {
	if po != nil {
		pmu.SetKind(*po)
	}
	return pmu
}

// SetLifecycle sets the "lifecycle" field.
func (pmu *PortalMetadataUpdate) SetLifecycle(po portalmetadata.Lifecycle) *PortalMetadataUpdate {
	pmu.mutation.SetLifecycle(po)
	return pmu
}

// SetNillableLifecycle sets the "lifecycle" field if the given value is not nil.
func (pmu *PortalMetadataUpdate) SetNillableLifecycle(po *portalmetadata.Lifecycle) *PortalMetadataUpdate {
	if po != nil {
		pmu.SetLifecycle(*po)
	}
	return pmu
}

// SetPortalID sets the "portal" edge to the Portal entity by ID.
func (pmu *PortalMetadataUpdate) SetPortalID(id int) *PortalMetadataUpdate {
	pmu.mutation.SetPortalID(id)
	return pmu
}

// SetPortal sets the "portal" edge to the Portal entity.
func (pmu *PortalMetadataUpdate) SetPortal(p *Portal) *PortalMetadataUpdate {
	return pmu.SetPortalID(p.ID)
}

// Mutation returns the PortalMetadataMutation object of the builder.
func (pmu *PortalMetadataUpdate) Mutation() *PortalMetadataMutation {
	return pmu.mutation
}

// ClearPortal clears the "portal" edge to the Portal entity.
func (pmu *PortalMetadataUpdate) ClearPortal() *PortalMetadataUpdate {
	pmu.mutation.ClearPortal()
	return pmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pmu *PortalMetadataUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pmu.hooks) == 0 {
		if err = pmu.check(); err != nil {
			return 0, err
		}
		affected, err = pmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PortalMetadataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pmu.check(); err != nil {
				return 0, err
			}
			pmu.mutation = mutation
			affected, err = pmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pmu.hooks) - 1; i >= 0; i-- {
			if pmu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pmu *PortalMetadataUpdate) SaveX(ctx context.Context) int {
	affected, err := pmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pmu *PortalMetadataUpdate) Exec(ctx context.Context) error {
	_, err := pmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmu *PortalMetadataUpdate) ExecX(ctx context.Context) {
	if err := pmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmu *PortalMetadataUpdate) check() error {
	if v, ok := pmu.mutation.Kind(); ok {
		if err := portalmetadata.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "PortalMetadata.kind": %w`, err)}
		}
	}
	if v, ok := pmu.mutation.Lifecycle(); ok {
		if err := portalmetadata.LifecycleValidator(v); err != nil {
			return &ValidationError{Name: "lifecycle", err: fmt.Errorf(`ent: validator failed for field "PortalMetadata.lifecycle": %w`, err)}
		}
	}
	if _, ok := pmu.mutation.PortalID(); pmu.mutation.PortalCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PortalMetadata.portal"`)
	}
	return nil
}

func (pmu *PortalMetadataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   portalmetadata.Table,
			Columns: portalmetadata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: portalmetadata.FieldID,
			},
		},
	}
	if ps := pmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmu.mutation.Kind(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: portalmetadata.FieldKind,
		})
	}
	if value, ok := pmu.mutation.Lifecycle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: portalmetadata.FieldLifecycle,
		})
	}
	if pmu.mutation.PortalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portalmetadata.PortalTable,
			Columns: []string{portalmetadata.PortalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: portal.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmu.mutation.PortalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portalmetadata.PortalTable,
			Columns: []string{portalmetadata.PortalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: portal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{portalmetadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PortalMetadataUpdateOne is the builder for updating a single PortalMetadata entity.
type PortalMetadataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PortalMetadataMutation
}

// SetKind sets the "kind" field.
func (pmuo *PortalMetadataUpdateOne) SetKind(po portalmetadata.Kind) *PortalMetadataUpdateOne {
	pmuo.mutation.SetKind(po)
	return pmuo
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (pmuo *PortalMetadataUpdateOne) SetNillableKind(po *portalmetadata.Kind) *PortalMetadataUpdateOne {
	if po != nil {
		pmuo.SetKind(*po)
	}
	return pmuo
}

// SetLifecycle sets the "lifecycle" field.
func (pmuo *PortalMetadataUpdateOne) SetLifecycle(po portalmetadata.Lifecycle) *PortalMetadataUpdateOne {
	pmuo.mutation.SetLifecycle(po)
	return pmuo
}

// SetNillableLifecycle sets the "lifecycle" field if the given value is not nil.
func (pmuo *PortalMetadataUpdateOne) SetNillableLifecycle(po *portalmetadata.Lifecycle) *PortalMetadataUpdateOne {
	if po != nil {
		pmuo.SetLifecycle(*po)
	}
	return pmuo
}

// SetPortalID sets the "portal" edge to the Portal entity by ID.
func (pmuo *PortalMetadataUpdateOne) SetPortalID(id int) *PortalMetadataUpdateOne {
	pmuo.mutation.SetPortalID(id)
	return pmuo
}

// SetPortal sets the "portal" edge to the Portal entity.
func (pmuo *PortalMetadataUpdateOne) SetPortal(p *Portal) *PortalMetadataUpdateOne {
	return pmuo.SetPortalID(p.ID)
}

// Mutation returns the PortalMetadataMutation object of the builder.
func (pmuo *PortalMetadataUpdateOne) Mutation() *PortalMetadataMutation {
	return pmuo.mutation
}

// ClearPortal clears the "portal" edge to the Portal entity.
func (pmuo *PortalMetadataUpdateOne) ClearPortal() *PortalMetadataUpdateOne {
	pmuo.mutation.ClearPortal()
	return pmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pmuo *PortalMetadataUpdateOne) Select(field string, fields ...string) *PortalMetadataUpdateOne {
	pmuo.fields = append([]string{field}, fields...)
	return pmuo
}

// Save executes the query and returns the updated PortalMetadata entity.
func (pmuo *PortalMetadataUpdateOne) Save(ctx context.Context) (*PortalMetadata, error) {
	var (
		err  error
		node *PortalMetadata
	)
	if len(pmuo.hooks) == 0 {
		if err = pmuo.check(); err != nil {
			return nil, err
		}
		node, err = pmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PortalMetadataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pmuo.check(); err != nil {
				return nil, err
			}
			pmuo.mutation = mutation
			node, err = pmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pmuo.hooks) - 1; i >= 0; i-- {
			if pmuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pmuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pmuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PortalMetadata)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PortalMetadataMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pmuo *PortalMetadataUpdateOne) SaveX(ctx context.Context) *PortalMetadata {
	node, err := pmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pmuo *PortalMetadataUpdateOne) Exec(ctx context.Context) error {
	_, err := pmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmuo *PortalMetadataUpdateOne) ExecX(ctx context.Context) {
	if err := pmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmuo *PortalMetadataUpdateOne) check() error {
	if v, ok := pmuo.mutation.Kind(); ok {
		if err := portalmetadata.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "PortalMetadata.kind": %w`, err)}
		}
	}
	if v, ok := pmuo.mutation.Lifecycle(); ok {
		if err := portalmetadata.LifecycleValidator(v); err != nil {
			return &ValidationError{Name: "lifecycle", err: fmt.Errorf(`ent: validator failed for field "PortalMetadata.lifecycle": %w`, err)}
		}
	}
	if _, ok := pmuo.mutation.PortalID(); pmuo.mutation.PortalCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PortalMetadata.portal"`)
	}
	return nil
}

func (pmuo *PortalMetadataUpdateOne) sqlSave(ctx context.Context) (_node *PortalMetadata, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   portalmetadata.Table,
			Columns: portalmetadata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: portalmetadata.FieldID,
			},
		},
	}
	id, ok := pmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PortalMetadata.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, portalmetadata.FieldID)
		for _, f := range fields {
			if !portalmetadata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != portalmetadata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmuo.mutation.Kind(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: portalmetadata.FieldKind,
		})
	}
	if value, ok := pmuo.mutation.Lifecycle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: portalmetadata.FieldLifecycle,
		})
	}
	if pmuo.mutation.PortalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portalmetadata.PortalTable,
			Columns: []string{portalmetadata.PortalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: portal.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmuo.mutation.PortalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portalmetadata.PortalTable,
			Columns: []string{portalmetadata.PortalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: portal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PortalMetadata{config: pmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{portalmetadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
