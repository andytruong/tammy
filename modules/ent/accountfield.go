// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"tammy/ent/account"
	"tammy/ent/accountfield"

	"entgo.io/ent/dialect/sql"
)

// AccountField is the model entity for the AccountField schema.
type AccountField struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// field ID
	Fid int `json:"fid,omitempty"`
	// field name
	Key string `json:"key,omitempty"`
	// field value
	Value string `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AccountFieldQuery when eager-loading is set.
	Edges          AccountFieldEdges `json:"edges"`
	account_fields *int
}

// AccountFieldEdges holds the relations/edges for other nodes in the graph.
type AccountFieldEdges struct {
	// Account holds the value of the account edge.
	Account *Account `json:"account,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AccountOrErr returns the Account value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AccountFieldEdges) AccountOrErr() (*Account, error) {
	if e.loadedTypes[0] {
		if e.Account == nil {
			// The edge account was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: account.Label}
		}
		return e.Account, nil
	}
	return nil, &NotLoadedError{edge: "account"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AccountField) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case accountfield.FieldID, accountfield.FieldFid:
			values[i] = new(sql.NullInt64)
		case accountfield.FieldKey, accountfield.FieldValue:
			values[i] = new(sql.NullString)
		case accountfield.ForeignKeys[0]: // account_fields
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AccountField", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AccountField fields.
func (af *AccountField) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case accountfield.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			af.ID = int(value.Int64)
		case accountfield.FieldFid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field fid", values[i])
			} else if value.Valid {
				af.Fid = int(value.Int64)
			}
		case accountfield.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				af.Key = value.String
			}
		case accountfield.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				af.Value = value.String
			}
		case accountfield.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field account_fields", value)
			} else if value.Valid {
				af.account_fields = new(int)
				*af.account_fields = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryAccount queries the "account" edge of the AccountField entity.
func (af *AccountField) QueryAccount() *AccountQuery {
	return (&AccountFieldClient{config: af.config}).QueryAccount(af)
}

// Update returns a builder for updating this AccountField.
// Note that you need to call AccountField.Unwrap() before calling this method if this AccountField
// was returned from a transaction, and the transaction was committed or rolled back.
func (af *AccountField) Update() *AccountFieldUpdateOne {
	return (&AccountFieldClient{config: af.config}).UpdateOne(af)
}

// Unwrap unwraps the AccountField entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (af *AccountField) Unwrap() *AccountField {
	_tx, ok := af.config.driver.(*txDriver)
	if !ok {
		panic("ent: AccountField is not a transactional entity")
	}
	af.config.driver = _tx.drv
	return af
}

// String implements the fmt.Stringer.
func (af *AccountField) String() string {
	var builder strings.Builder
	builder.WriteString("AccountField(")
	builder.WriteString(fmt.Sprintf("id=%v, ", af.ID))
	builder.WriteString("fid=")
	builder.WriteString(fmt.Sprintf("%v", af.Fid))
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(af.Key)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(af.Value)
	builder.WriteByte(')')
	return builder.String()
}

// AccountFields is a parsable slice of AccountField.
type AccountFields []*AccountField

func (af AccountFields) config(cfg config) {
	for _i := range af {
		af[_i].config = cfg
	}
}
