// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"tammy/ent/user"
	"tammy/ent/useremail"
	"time"

	"entgo.io/ent/dialect/sql"
)

// UserEmail is the model entity for the UserEmail schema.
type UserEmail struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// IsVerified holds the value of the "isVerified" field.
	IsVerified bool `json:"isVerified,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserEmailQuery when eager-loading is set.
	Edges       UserEmailEdges `json:"edges"`
	user_emails *int
}

// UserEmailEdges holds the relations/edges for other nodes in the graph.
type UserEmailEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEmailEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserEmail) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case useremail.FieldIsVerified:
			values[i] = new(sql.NullBool)
		case useremail.FieldID:
			values[i] = new(sql.NullInt64)
		case useremail.FieldValue:
			values[i] = new(sql.NullString)
		case useremail.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case useremail.ForeignKeys[0]: // user_emails
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserEmail", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserEmail fields.
func (ue *UserEmail) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case useremail.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ue.ID = int(value.Int64)
		case useremail.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				ue.Value = value.String
			}
		case useremail.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				ue.CreatedAt = value.Time
			}
		case useremail.FieldIsVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isVerified", values[i])
			} else if value.Valid {
				ue.IsVerified = value.Bool
			}
		case useremail.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_emails", value)
			} else if value.Valid {
				ue.user_emails = new(int)
				*ue.user_emails = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the UserEmail entity.
func (ue *UserEmail) QueryUser() *UserQuery {
	return (&UserEmailClient{config: ue.config}).QueryUser(ue)
}

// Update returns a builder for updating this UserEmail.
// Note that you need to call UserEmail.Unwrap() before calling this method if this UserEmail
// was returned from a transaction, and the transaction was committed or rolled back.
func (ue *UserEmail) Update() *UserEmailUpdateOne {
	return (&UserEmailClient{config: ue.config}).UpdateOne(ue)
}

// Unwrap unwraps the UserEmail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ue *UserEmail) Unwrap() *UserEmail {
	_tx, ok := ue.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserEmail is not a transactional entity")
	}
	ue.config.driver = _tx.drv
	return ue
}

// String implements the fmt.Stringer.
func (ue *UserEmail) String() string {
	var builder strings.Builder
	builder.WriteString("UserEmail(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ue.ID))
	builder.WriteString("value=")
	builder.WriteString(ue.Value)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(ue.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("isVerified=")
	builder.WriteString(fmt.Sprintf("%v", ue.IsVerified))
	builder.WriteByte(')')
	return builder.String()
}

// UserEmails is a parsable slice of UserEmail.
type UserEmails []*UserEmail

func (ue UserEmails) config(cfg config) {
	for _i := range ue {
		ue[_i].config = cfg
	}
}
