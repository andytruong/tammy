// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"tammy/ent/portal"
	"tammy/ent/portallegal"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PortalLegalCreate is the builder for creating a PortalLegal entity.
type PortalLegalCreate struct {
	config
	mutation *PortalLegalMutation
	hooks    []Hook
}

// SetCreatedAt sets the "createdAt" field.
func (plc *PortalLegalCreate) SetCreatedAt(t time.Time) *PortalLegalCreate {
	plc.mutation.SetCreatedAt(t)
	return plc
}

// SetUpdatedAt sets the "updatedAt" field.
func (plc *PortalLegalCreate) SetUpdatedAt(t time.Time) *PortalLegalCreate {
	plc.mutation.SetUpdatedAt(t)
	return plc
}

// SetPrivacyPolicy sets the "privacyPolicy" field.
func (plc *PortalLegalCreate) SetPrivacyPolicy(s string) *PortalLegalCreate {
	plc.mutation.SetPrivacyPolicy(s)
	return plc
}

// SetTermOfService sets the "termOfService" field.
func (plc *PortalLegalCreate) SetTermOfService(s string) *PortalLegalCreate {
	plc.mutation.SetTermOfService(s)
	return plc
}

// SetCopyright sets the "copyright" field.
func (plc *PortalLegalCreate) SetCopyright(s string) *PortalLegalCreate {
	plc.mutation.SetCopyright(s)
	return plc
}

// SetOnlineTrainingAgreement sets the "onlineTrainingAgreement" field.
func (plc *PortalLegalCreate) SetOnlineTrainingAgreement(s string) *PortalLegalCreate {
	plc.mutation.SetOnlineTrainingAgreement(s)
	return plc
}

// SetID sets the "id" field.
func (plc *PortalLegalCreate) SetID(i int) *PortalLegalCreate {
	plc.mutation.SetID(i)
	return plc
}

// SetPortalID sets the "portal" edge to the Portal entity by ID.
func (plc *PortalLegalCreate) SetPortalID(id int) *PortalLegalCreate {
	plc.mutation.SetPortalID(id)
	return plc
}

// SetPortal sets the "portal" edge to the Portal entity.
func (plc *PortalLegalCreate) SetPortal(p *Portal) *PortalLegalCreate {
	return plc.SetPortalID(p.ID)
}

// Mutation returns the PortalLegalMutation object of the builder.
func (plc *PortalLegalCreate) Mutation() *PortalLegalMutation {
	return plc.mutation
}

// Save creates the PortalLegal in the database.
func (plc *PortalLegalCreate) Save(ctx context.Context) (*PortalLegal, error) {
	var (
		err  error
		node *PortalLegal
	)
	if len(plc.hooks) == 0 {
		if err = plc.check(); err != nil {
			return nil, err
		}
		node, err = plc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PortalLegalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = plc.check(); err != nil {
				return nil, err
			}
			plc.mutation = mutation
			if node, err = plc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(plc.hooks) - 1; i >= 0; i-- {
			if plc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = plc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, plc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PortalLegal)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PortalLegalMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (plc *PortalLegalCreate) SaveX(ctx context.Context) *PortalLegal {
	v, err := plc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (plc *PortalLegalCreate) Exec(ctx context.Context) error {
	_, err := plc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (plc *PortalLegalCreate) ExecX(ctx context.Context) {
	if err := plc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (plc *PortalLegalCreate) check() error {
	if _, ok := plc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "PortalLegal.createdAt"`)}
	}
	if _, ok := plc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "PortalLegal.updatedAt"`)}
	}
	if _, ok := plc.mutation.PrivacyPolicy(); !ok {
		return &ValidationError{Name: "privacyPolicy", err: errors.New(`ent: missing required field "PortalLegal.privacyPolicy"`)}
	}
	if _, ok := plc.mutation.TermOfService(); !ok {
		return &ValidationError{Name: "termOfService", err: errors.New(`ent: missing required field "PortalLegal.termOfService"`)}
	}
	if _, ok := plc.mutation.Copyright(); !ok {
		return &ValidationError{Name: "copyright", err: errors.New(`ent: missing required field "PortalLegal.copyright"`)}
	}
	if _, ok := plc.mutation.OnlineTrainingAgreement(); !ok {
		return &ValidationError{Name: "onlineTrainingAgreement", err: errors.New(`ent: missing required field "PortalLegal.onlineTrainingAgreement"`)}
	}
	if _, ok := plc.mutation.PortalID(); !ok {
		return &ValidationError{Name: "portal", err: errors.New(`ent: missing required edge "PortalLegal.portal"`)}
	}
	return nil
}

func (plc *PortalLegalCreate) sqlSave(ctx context.Context) (*PortalLegal, error) {
	_node, _spec := plc.createSpec()
	if err := sqlgraph.CreateNode(ctx, plc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (plc *PortalLegalCreate) createSpec() (*PortalLegal, *sqlgraph.CreateSpec) {
	var (
		_node = &PortalLegal{config: plc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: portallegal.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: portallegal.FieldID,
			},
		}
	)
	if id, ok := plc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := plc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: portallegal.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := plc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: portallegal.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := plc.mutation.PrivacyPolicy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: portallegal.FieldPrivacyPolicy,
		})
		_node.PrivacyPolicy = value
	}
	if value, ok := plc.mutation.TermOfService(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: portallegal.FieldTermOfService,
		})
		_node.TermOfService = value
	}
	if value, ok := plc.mutation.Copyright(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: portallegal.FieldCopyright,
		})
		_node.Copyright = value
	}
	if value, ok := plc.mutation.OnlineTrainingAgreement(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: portallegal.FieldOnlineTrainingAgreement,
		})
		_node.OnlineTrainingAgreement = value
	}
	if nodes := plc.mutation.PortalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portallegal.PortalTable,
			Columns: []string{portallegal.PortalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: portal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.portal_legal = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PortalLegalCreateBulk is the builder for creating many PortalLegal entities in bulk.
type PortalLegalCreateBulk struct {
	config
	builders []*PortalLegalCreate
}

// Save creates the PortalLegal entities in the database.
func (plcb *PortalLegalCreateBulk) Save(ctx context.Context) ([]*PortalLegal, error) {
	specs := make([]*sqlgraph.CreateSpec, len(plcb.builders))
	nodes := make([]*PortalLegal, len(plcb.builders))
	mutators := make([]Mutator, len(plcb.builders))
	for i := range plcb.builders {
		func(i int, root context.Context) {
			builder := plcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PortalLegalMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, plcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, plcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, plcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (plcb *PortalLegalCreateBulk) SaveX(ctx context.Context) []*PortalLegal {
	v, err := plcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (plcb *PortalLegalCreateBulk) Exec(ctx context.Context) error {
	_, err := plcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (plcb *PortalLegalCreateBulk) ExecX(ctx context.Context) {
	if err := plcb.Exec(ctx); err != nil {
		panic(err)
	}
}
