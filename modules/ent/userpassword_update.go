// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"tammy/ent/predicate"
	"tammy/ent/user"
	"tammy/ent/userpassword"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserPasswordUpdate is the builder for updating UserPassword entities.
type UserPasswordUpdate struct {
	config
	hooks    []Hook
	mutation *UserPasswordMutation
}

// Where appends a list predicates to the UserPasswordUpdate builder.
func (upu *UserPasswordUpdate) Where(ps ...predicate.UserPassword) *UserPasswordUpdate {
	upu.mutation.Where(ps...)
	return upu
}

// SetHashedValue sets the "hashedValue" field.
func (upu *UserPasswordUpdate) SetHashedValue(s string) *UserPasswordUpdate {
	upu.mutation.SetHashedValue(s)
	return upu
}

// SetIsActive sets the "isActive" field.
func (upu *UserPasswordUpdate) SetIsActive(b bool) *UserPasswordUpdate {
	upu.mutation.SetIsActive(b)
	return upu
}

// SetCreatedAt sets the "createdAt" field.
func (upu *UserPasswordUpdate) SetCreatedAt(u uint32) *UserPasswordUpdate {
	upu.mutation.ResetCreatedAt()
	upu.mutation.SetCreatedAt(u)
	return upu
}

// AddCreatedAt adds u to the "createdAt" field.
func (upu *UserPasswordUpdate) AddCreatedAt(u int32) *UserPasswordUpdate {
	upu.mutation.AddCreatedAt(u)
	return upu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (upu *UserPasswordUpdate) SetUserID(id int) *UserPasswordUpdate {
	upu.mutation.SetUserID(id)
	return upu
}

// SetUser sets the "user" edge to the User entity.
func (upu *UserPasswordUpdate) SetUser(u *User) *UserPasswordUpdate {
	return upu.SetUserID(u.ID)
}

// Mutation returns the UserPasswordMutation object of the builder.
func (upu *UserPasswordUpdate) Mutation() *UserPasswordMutation {
	return upu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (upu *UserPasswordUpdate) ClearUser() *UserPasswordUpdate {
	upu.mutation.ClearUser()
	return upu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (upu *UserPasswordUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(upu.hooks) == 0 {
		if err = upu.check(); err != nil {
			return 0, err
		}
		affected, err = upu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserPasswordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = upu.check(); err != nil {
				return 0, err
			}
			upu.mutation = mutation
			affected, err = upu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(upu.hooks) - 1; i >= 0; i-- {
			if upu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = upu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, upu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (upu *UserPasswordUpdate) SaveX(ctx context.Context) int {
	affected, err := upu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (upu *UserPasswordUpdate) Exec(ctx context.Context) error {
	_, err := upu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upu *UserPasswordUpdate) ExecX(ctx context.Context) {
	if err := upu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upu *UserPasswordUpdate) check() error {
	if _, ok := upu.mutation.UserID(); upu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserPassword.user"`)
	}
	return nil
}

func (upu *UserPasswordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userpassword.Table,
			Columns: userpassword.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userpassword.FieldID,
			},
		},
	}
	if ps := upu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upu.mutation.HashedValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userpassword.FieldHashedValue,
		})
	}
	if value, ok := upu.mutation.IsActive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: userpassword.FieldIsActive,
		})
	}
	if value, ok := upu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userpassword.FieldCreatedAt,
		})
	}
	if value, ok := upu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userpassword.FieldCreatedAt,
		})
	}
	if upu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userpassword.UserTable,
			Columns: []string{userpassword.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userpassword.UserTable,
			Columns: []string{userpassword.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, upu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpassword.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// UserPasswordUpdateOne is the builder for updating a single UserPassword entity.
type UserPasswordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserPasswordMutation
}

// SetHashedValue sets the "hashedValue" field.
func (upuo *UserPasswordUpdateOne) SetHashedValue(s string) *UserPasswordUpdateOne {
	upuo.mutation.SetHashedValue(s)
	return upuo
}

// SetIsActive sets the "isActive" field.
func (upuo *UserPasswordUpdateOne) SetIsActive(b bool) *UserPasswordUpdateOne {
	upuo.mutation.SetIsActive(b)
	return upuo
}

// SetCreatedAt sets the "createdAt" field.
func (upuo *UserPasswordUpdateOne) SetCreatedAt(u uint32) *UserPasswordUpdateOne {
	upuo.mutation.ResetCreatedAt()
	upuo.mutation.SetCreatedAt(u)
	return upuo
}

// AddCreatedAt adds u to the "createdAt" field.
func (upuo *UserPasswordUpdateOne) AddCreatedAt(u int32) *UserPasswordUpdateOne {
	upuo.mutation.AddCreatedAt(u)
	return upuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (upuo *UserPasswordUpdateOne) SetUserID(id int) *UserPasswordUpdateOne {
	upuo.mutation.SetUserID(id)
	return upuo
}

// SetUser sets the "user" edge to the User entity.
func (upuo *UserPasswordUpdateOne) SetUser(u *User) *UserPasswordUpdateOne {
	return upuo.SetUserID(u.ID)
}

// Mutation returns the UserPasswordMutation object of the builder.
func (upuo *UserPasswordUpdateOne) Mutation() *UserPasswordMutation {
	return upuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (upuo *UserPasswordUpdateOne) ClearUser() *UserPasswordUpdateOne {
	upuo.mutation.ClearUser()
	return upuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (upuo *UserPasswordUpdateOne) Select(field string, fields ...string) *UserPasswordUpdateOne {
	upuo.fields = append([]string{field}, fields...)
	return upuo
}

// Save executes the query and returns the updated UserPassword entity.
func (upuo *UserPasswordUpdateOne) Save(ctx context.Context) (*UserPassword, error) {
	var (
		err  error
		node *UserPassword
	)
	if len(upuo.hooks) == 0 {
		if err = upuo.check(); err != nil {
			return nil, err
		}
		node, err = upuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserPasswordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = upuo.check(); err != nil {
				return nil, err
			}
			upuo.mutation = mutation
			node, err = upuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(upuo.hooks) - 1; i >= 0; i-- {
			if upuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = upuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, upuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*UserPassword)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserPasswordMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (upuo *UserPasswordUpdateOne) SaveX(ctx context.Context) *UserPassword {
	node, err := upuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (upuo *UserPasswordUpdateOne) Exec(ctx context.Context) error {
	_, err := upuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upuo *UserPasswordUpdateOne) ExecX(ctx context.Context) {
	if err := upuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upuo *UserPasswordUpdateOne) check() error {
	if _, ok := upuo.mutation.UserID(); upuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserPassword.user"`)
	}
	return nil
}

func (upuo *UserPasswordUpdateOne) sqlSave(ctx context.Context) (_node *UserPassword, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userpassword.Table,
			Columns: userpassword.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userpassword.FieldID,
			},
		},
	}
	id, ok := upuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserPassword.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := upuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userpassword.FieldID)
		for _, f := range fields {
			if !userpassword.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userpassword.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := upuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upuo.mutation.HashedValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userpassword.FieldHashedValue,
		})
	}
	if value, ok := upuo.mutation.IsActive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: userpassword.FieldIsActive,
		})
	}
	if value, ok := upuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userpassword.FieldCreatedAt,
		})
	}
	if value, ok := upuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userpassword.FieldCreatedAt,
		})
	}
	if upuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userpassword.UserTable,
			Columns: []string{userpassword.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userpassword.UserTable,
			Columns: []string{userpassword.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserPassword{config: upuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, upuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpassword.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
