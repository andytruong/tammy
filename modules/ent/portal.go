// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"tammy/ent/portal"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Portal is the model entity for the Portal schema.
type Portal struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// IsActive holds the value of the "isActive" field.
	IsActive bool `json:"isActive,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PortalQuery when eager-loading is set.
	Edges PortalEdges `json:"edges"`
}

// PortalEdges holds the relations/edges for other nodes in the graph.
type PortalEdges struct {
	// Members holds the value of the members edge.
	Members []*Account `json:"members,omitempty"`
	// Metadata holds the value of the metadata edge.
	Metadata []*PortalMetadata `json:"metadata,omitempty"`
	// Legal holds the value of the legal edge.
	Legal []*PortalLegal `json:"legal,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// MembersOrErr returns the Members value or an error if the edge
// was not loaded in eager-loading.
func (e PortalEdges) MembersOrErr() ([]*Account, error) {
	if e.loadedTypes[0] {
		return e.Members, nil
	}
	return nil, &NotLoadedError{edge: "members"}
}

// MetadataOrErr returns the Metadata value or an error if the edge
// was not loaded in eager-loading.
func (e PortalEdges) MetadataOrErr() ([]*PortalMetadata, error) {
	if e.loadedTypes[1] {
		return e.Metadata, nil
	}
	return nil, &NotLoadedError{edge: "metadata"}
}

// LegalOrErr returns the Legal value or an error if the edge
// was not loaded in eager-loading.
func (e PortalEdges) LegalOrErr() ([]*PortalLegal, error) {
	if e.loadedTypes[2] {
		return e.Legal, nil
	}
	return nil, &NotLoadedError{edge: "legal"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Portal) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case portal.FieldIsActive:
			values[i] = new(sql.NullBool)
		case portal.FieldID:
			values[i] = new(sql.NullInt64)
		case portal.FieldSlug:
			values[i] = new(sql.NullString)
		case portal.FieldCreatedAt, portal.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Portal", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Portal fields.
func (po *Portal) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case portal.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			po.ID = int(value.Int64)
		case portal.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				po.CreatedAt = value.Time
			}
		case portal.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				po.UpdatedAt = value.Time
			}
		case portal.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isActive", values[i])
			} else if value.Valid {
				po.IsActive = value.Bool
			}
		case portal.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				po.Slug = value.String
			}
		}
	}
	return nil
}

// QueryMembers queries the "members" edge of the Portal entity.
func (po *Portal) QueryMembers() *AccountQuery {
	return (&PortalClient{config: po.config}).QueryMembers(po)
}

// QueryMetadata queries the "metadata" edge of the Portal entity.
func (po *Portal) QueryMetadata() *PortalMetadataQuery {
	return (&PortalClient{config: po.config}).QueryMetadata(po)
}

// QueryLegal queries the "legal" edge of the Portal entity.
func (po *Portal) QueryLegal() *PortalLegalQuery {
	return (&PortalClient{config: po.config}).QueryLegal(po)
}

// Update returns a builder for updating this Portal.
// Note that you need to call Portal.Unwrap() before calling this method if this Portal
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Portal) Update() *PortalUpdateOne {
	return (&PortalClient{config: po.config}).UpdateOne(po)
}

// Unwrap unwraps the Portal entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Portal) Unwrap() *Portal {
	_tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Portal is not a transactional entity")
	}
	po.config.driver = _tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Portal) String() string {
	var builder strings.Builder
	builder.WriteString("Portal(")
	builder.WriteString(fmt.Sprintf("id=%v, ", po.ID))
	builder.WriteString("createdAt=")
	builder.WriteString(po.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(po.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("isActive=")
	builder.WriteString(fmt.Sprintf("%v", po.IsActive))
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(po.Slug)
	builder.WriteByte(')')
	return builder.String()
}

// Portals is a parsable slice of Portal.
type Portals []*Portal

func (po Portals) config(cfg config) {
	for _i := range po {
		po[_i].config = cfg
	}
}
