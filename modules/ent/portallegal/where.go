// Code generated by ent, DO NOT EDIT.

package portallegal

import (
	"tammy/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// PrivacyPolicy applies equality check predicate on the "privacyPolicy" field. It's identical to PrivacyPolicyEQ.
func PrivacyPolicy(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrivacyPolicy), v))
	})
}

// TermOfService applies equality check predicate on the "termOfService" field. It's identical to TermOfServiceEQ.
func TermOfService(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTermOfService), v))
	})
}

// Copyright applies equality check predicate on the "copyright" field. It's identical to CopyrightEQ.
func Copyright(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCopyright), v))
	})
}

// OnlineTrainingAgreement applies equality check predicate on the "onlineTrainingAgreement" field. It's identical to OnlineTrainingAgreementEQ.
func OnlineTrainingAgreement(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOnlineTrainingAgreement), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.PortalLegal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PortalLegal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PortalLegal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PortalLegal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.PortalLegal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PortalLegal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PortalLegal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PortalLegal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// PrivacyPolicyEQ applies the EQ predicate on the "privacyPolicy" field.
func PrivacyPolicyEQ(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrivacyPolicy), v))
	})
}

// PrivacyPolicyNEQ applies the NEQ predicate on the "privacyPolicy" field.
func PrivacyPolicyNEQ(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrivacyPolicy), v))
	})
}

// PrivacyPolicyIn applies the In predicate on the "privacyPolicy" field.
func PrivacyPolicyIn(vs ...string) predicate.PortalLegal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PortalLegal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrivacyPolicy), v...))
	})
}

// PrivacyPolicyNotIn applies the NotIn predicate on the "privacyPolicy" field.
func PrivacyPolicyNotIn(vs ...string) predicate.PortalLegal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PortalLegal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrivacyPolicy), v...))
	})
}

// PrivacyPolicyGT applies the GT predicate on the "privacyPolicy" field.
func PrivacyPolicyGT(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrivacyPolicy), v))
	})
}

// PrivacyPolicyGTE applies the GTE predicate on the "privacyPolicy" field.
func PrivacyPolicyGTE(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrivacyPolicy), v))
	})
}

// PrivacyPolicyLT applies the LT predicate on the "privacyPolicy" field.
func PrivacyPolicyLT(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrivacyPolicy), v))
	})
}

// PrivacyPolicyLTE applies the LTE predicate on the "privacyPolicy" field.
func PrivacyPolicyLTE(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrivacyPolicy), v))
	})
}

// PrivacyPolicyContains applies the Contains predicate on the "privacyPolicy" field.
func PrivacyPolicyContains(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPrivacyPolicy), v))
	})
}

// PrivacyPolicyHasPrefix applies the HasPrefix predicate on the "privacyPolicy" field.
func PrivacyPolicyHasPrefix(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPrivacyPolicy), v))
	})
}

// PrivacyPolicyHasSuffix applies the HasSuffix predicate on the "privacyPolicy" field.
func PrivacyPolicyHasSuffix(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPrivacyPolicy), v))
	})
}

// PrivacyPolicyEqualFold applies the EqualFold predicate on the "privacyPolicy" field.
func PrivacyPolicyEqualFold(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPrivacyPolicy), v))
	})
}

// PrivacyPolicyContainsFold applies the ContainsFold predicate on the "privacyPolicy" field.
func PrivacyPolicyContainsFold(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPrivacyPolicy), v))
	})
}

// TermOfServiceEQ applies the EQ predicate on the "termOfService" field.
func TermOfServiceEQ(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTermOfService), v))
	})
}

// TermOfServiceNEQ applies the NEQ predicate on the "termOfService" field.
func TermOfServiceNEQ(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTermOfService), v))
	})
}

// TermOfServiceIn applies the In predicate on the "termOfService" field.
func TermOfServiceIn(vs ...string) predicate.PortalLegal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PortalLegal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTermOfService), v...))
	})
}

// TermOfServiceNotIn applies the NotIn predicate on the "termOfService" field.
func TermOfServiceNotIn(vs ...string) predicate.PortalLegal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PortalLegal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTermOfService), v...))
	})
}

// TermOfServiceGT applies the GT predicate on the "termOfService" field.
func TermOfServiceGT(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTermOfService), v))
	})
}

// TermOfServiceGTE applies the GTE predicate on the "termOfService" field.
func TermOfServiceGTE(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTermOfService), v))
	})
}

// TermOfServiceLT applies the LT predicate on the "termOfService" field.
func TermOfServiceLT(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTermOfService), v))
	})
}

// TermOfServiceLTE applies the LTE predicate on the "termOfService" field.
func TermOfServiceLTE(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTermOfService), v))
	})
}

// TermOfServiceContains applies the Contains predicate on the "termOfService" field.
func TermOfServiceContains(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTermOfService), v))
	})
}

// TermOfServiceHasPrefix applies the HasPrefix predicate on the "termOfService" field.
func TermOfServiceHasPrefix(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTermOfService), v))
	})
}

// TermOfServiceHasSuffix applies the HasSuffix predicate on the "termOfService" field.
func TermOfServiceHasSuffix(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTermOfService), v))
	})
}

// TermOfServiceEqualFold applies the EqualFold predicate on the "termOfService" field.
func TermOfServiceEqualFold(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTermOfService), v))
	})
}

// TermOfServiceContainsFold applies the ContainsFold predicate on the "termOfService" field.
func TermOfServiceContainsFold(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTermOfService), v))
	})
}

// CopyrightEQ applies the EQ predicate on the "copyright" field.
func CopyrightEQ(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCopyright), v))
	})
}

// CopyrightNEQ applies the NEQ predicate on the "copyright" field.
func CopyrightNEQ(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCopyright), v))
	})
}

// CopyrightIn applies the In predicate on the "copyright" field.
func CopyrightIn(vs ...string) predicate.PortalLegal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PortalLegal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCopyright), v...))
	})
}

// CopyrightNotIn applies the NotIn predicate on the "copyright" field.
func CopyrightNotIn(vs ...string) predicate.PortalLegal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PortalLegal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCopyright), v...))
	})
}

// CopyrightGT applies the GT predicate on the "copyright" field.
func CopyrightGT(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCopyright), v))
	})
}

// CopyrightGTE applies the GTE predicate on the "copyright" field.
func CopyrightGTE(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCopyright), v))
	})
}

// CopyrightLT applies the LT predicate on the "copyright" field.
func CopyrightLT(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCopyright), v))
	})
}

// CopyrightLTE applies the LTE predicate on the "copyright" field.
func CopyrightLTE(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCopyright), v))
	})
}

// CopyrightContains applies the Contains predicate on the "copyright" field.
func CopyrightContains(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCopyright), v))
	})
}

// CopyrightHasPrefix applies the HasPrefix predicate on the "copyright" field.
func CopyrightHasPrefix(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCopyright), v))
	})
}

// CopyrightHasSuffix applies the HasSuffix predicate on the "copyright" field.
func CopyrightHasSuffix(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCopyright), v))
	})
}

// CopyrightEqualFold applies the EqualFold predicate on the "copyright" field.
func CopyrightEqualFold(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCopyright), v))
	})
}

// CopyrightContainsFold applies the ContainsFold predicate on the "copyright" field.
func CopyrightContainsFold(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCopyright), v))
	})
}

// OnlineTrainingAgreementEQ applies the EQ predicate on the "onlineTrainingAgreement" field.
func OnlineTrainingAgreementEQ(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOnlineTrainingAgreement), v))
	})
}

// OnlineTrainingAgreementNEQ applies the NEQ predicate on the "onlineTrainingAgreement" field.
func OnlineTrainingAgreementNEQ(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOnlineTrainingAgreement), v))
	})
}

// OnlineTrainingAgreementIn applies the In predicate on the "onlineTrainingAgreement" field.
func OnlineTrainingAgreementIn(vs ...string) predicate.PortalLegal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PortalLegal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOnlineTrainingAgreement), v...))
	})
}

// OnlineTrainingAgreementNotIn applies the NotIn predicate on the "onlineTrainingAgreement" field.
func OnlineTrainingAgreementNotIn(vs ...string) predicate.PortalLegal {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PortalLegal(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOnlineTrainingAgreement), v...))
	})
}

// OnlineTrainingAgreementGT applies the GT predicate on the "onlineTrainingAgreement" field.
func OnlineTrainingAgreementGT(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOnlineTrainingAgreement), v))
	})
}

// OnlineTrainingAgreementGTE applies the GTE predicate on the "onlineTrainingAgreement" field.
func OnlineTrainingAgreementGTE(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOnlineTrainingAgreement), v))
	})
}

// OnlineTrainingAgreementLT applies the LT predicate on the "onlineTrainingAgreement" field.
func OnlineTrainingAgreementLT(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOnlineTrainingAgreement), v))
	})
}

// OnlineTrainingAgreementLTE applies the LTE predicate on the "onlineTrainingAgreement" field.
func OnlineTrainingAgreementLTE(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOnlineTrainingAgreement), v))
	})
}

// OnlineTrainingAgreementContains applies the Contains predicate on the "onlineTrainingAgreement" field.
func OnlineTrainingAgreementContains(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOnlineTrainingAgreement), v))
	})
}

// OnlineTrainingAgreementHasPrefix applies the HasPrefix predicate on the "onlineTrainingAgreement" field.
func OnlineTrainingAgreementHasPrefix(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOnlineTrainingAgreement), v))
	})
}

// OnlineTrainingAgreementHasSuffix applies the HasSuffix predicate on the "onlineTrainingAgreement" field.
func OnlineTrainingAgreementHasSuffix(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOnlineTrainingAgreement), v))
	})
}

// OnlineTrainingAgreementEqualFold applies the EqualFold predicate on the "onlineTrainingAgreement" field.
func OnlineTrainingAgreementEqualFold(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOnlineTrainingAgreement), v))
	})
}

// OnlineTrainingAgreementContainsFold applies the ContainsFold predicate on the "onlineTrainingAgreement" field.
func OnlineTrainingAgreementContainsFold(v string) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOnlineTrainingAgreement), v))
	})
}

// HasPortal applies the HasEdge predicate on the "portal" edge.
func HasPortal() predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PortalTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PortalTable, PortalColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPortalWith applies the HasEdge predicate on the "portal" edge with a given conditions (other predicates).
func HasPortalWith(preds ...predicate.Portal) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PortalInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PortalTable, PortalColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PortalLegal) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PortalLegal) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PortalLegal) predicate.PortalLegal {
	return predicate.PortalLegal(func(s *sql.Selector) {
		p(s.Not())
	})
}
