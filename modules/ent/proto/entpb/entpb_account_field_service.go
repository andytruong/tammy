// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	strconv "strconv"
	ent "tammy/ent"
	account "tammy/ent/account"
	accountfield "tammy/ent/accountfield"
)

// AccountFieldService implements AccountFieldServiceServer
type AccountFieldService struct {
	client *ent.Client
	UnimplementedAccountFieldServiceServer
}

// NewAccountFieldService returns a new AccountFieldService
func NewAccountFieldService(client *ent.Client) *AccountFieldService {
	return &AccountFieldService{
		client: client,
	}
}

// toProtoAccountField transforms the ent type to the pb type
func toProtoAccountField(e *ent.AccountField) (*AccountField, error) {
	v := &AccountField{}
	fid := int64(e.Fid)
	v.Fid = fid
	id := int64(e.ID)
	v.Id = id
	key := e.Key
	v.Key = key
	value := e.Value
	v.Value = value
	if edg := e.Edges.Account; edg != nil {
		id := int64(edg.ID)
		v.Account = &Account{
			Id: id,
		}
	}
	return v, nil
}

// toProtoAccountFieldList transforms a list of ent type to a list of pb type
func toProtoAccountFieldList(e []*ent.AccountField) ([]*AccountField, error) {
	var pbList []*AccountField
	for _, entEntity := range e {
		pbEntity, err := toProtoAccountField(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements AccountFieldServiceServer.Create
func (svc *AccountFieldService) Create(ctx context.Context, req *CreateAccountFieldRequest) (*AccountField, error) {
	accountfield := req.GetAccountField()
	m, err := svc.createBuilder(accountfield)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoAccountField(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements AccountFieldServiceServer.Get
func (svc *AccountFieldService) Get(ctx context.Context, req *GetAccountFieldRequest) (*AccountField, error) {
	var (
		err error
		get *ent.AccountField
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetAccountFieldRequest_VIEW_UNSPECIFIED, GetAccountFieldRequest_BASIC:
		get, err = svc.client.AccountField.Get(ctx, id)
	case GetAccountFieldRequest_WITH_EDGE_IDS:
		get, err = svc.client.AccountField.Query().
			Where(accountfield.ID(id)).
			WithAccount(func(query *ent.AccountQuery) {
				query.Select(account.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoAccountField(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements AccountFieldServiceServer.Update
func (svc *AccountFieldService) Update(ctx context.Context, req *UpdateAccountFieldRequest) (*AccountField, error) {
	accountfield := req.GetAccountField()
	accountfieldID := int(accountfield.GetId())
	m := svc.client.AccountField.UpdateOneID(accountfieldID)
	accountfieldFid := int(accountfield.GetFid())
	m.SetFid(accountfieldFid)
	accountfieldKey := accountfield.GetKey()
	m.SetKey(accountfieldKey)
	accountfieldValue := accountfield.GetValue()
	m.SetValue(accountfieldValue)
	if accountfield.GetAccount() != nil {
		accountfieldAccount := int(accountfield.GetAccount().GetId())
		m.SetAccountID(accountfieldAccount)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoAccountField(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements AccountFieldServiceServer.Delete
func (svc *AccountFieldService) Delete(ctx context.Context, req *DeleteAccountFieldRequest) (*emptypb.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.AccountField.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements AccountFieldServiceServer.List
func (svc *AccountFieldService) List(ctx context.Context, req *ListAccountFieldRequest) (*ListAccountFieldResponse, error) {
	var (
		err      error
		entList  []*ent.AccountField
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.AccountField.Query().
		Order(ent.Desc(accountfield.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		token, err := strconv.ParseInt(string(bytes), 10, 32)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken := int(token)
		listQuery = listQuery.
			Where(accountfield.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListAccountFieldRequest_VIEW_UNSPECIFIED, ListAccountFieldRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListAccountFieldRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithAccount(func(query *ent.AccountQuery) {
				query.Select(account.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoAccountFieldList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListAccountFieldResponse{
			AccountFieldList: protoList,
			NextPageToken:    nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements AccountFieldServiceServer.BatchCreate
func (svc *AccountFieldService) BatchCreate(ctx context.Context, req *BatchCreateAccountFieldsRequest) (*BatchCreateAccountFieldsResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.AccountFieldCreate, len(requests))
	for i, req := range requests {
		accountfield := req.GetAccountField()
		var err error
		bulk[i], err = svc.createBuilder(accountfield)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.AccountField.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoAccountFieldList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateAccountFieldsResponse{
			AccountFields: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *AccountFieldService) createBuilder(accountfield *AccountField) (*ent.AccountFieldCreate, error) {
	m := svc.client.AccountField.Create()
	accountfieldFid := int(accountfield.GetFid())
	m.SetFid(accountfieldFid)
	accountfieldKey := accountfield.GetKey()
	m.SetKey(accountfieldKey)
	accountfieldValue := accountfield.GetValue()
	m.SetValue(accountfieldValue)
	if accountfield.GetAccount() != nil {
		accountfieldAccount := int(accountfield.GetAccount().GetId())
		m.SetAccountID(accountfieldAccount)
	}
	return m, nil
}
