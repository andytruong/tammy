// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	strconv "strconv"
	ent "tammy/ent"
	user "tammy/ent/user"
	useremail "tammy/ent/useremail"
)

// UserEmailService implements UserEmailServiceServer
type UserEmailService struct {
	client *ent.Client
	UnimplementedUserEmailServiceServer
}

// NewUserEmailService returns a new UserEmailService
func NewUserEmailService(client *ent.Client) *UserEmailService {
	return &UserEmailService{
		client: client,
	}
}

// toProtoUserEmail transforms the ent type to the pb type
func toProtoUserEmail(e *ent.UserEmail) (*UserEmail, error) {
	v := &UserEmail{}
	createdAt := timestamppb.New(e.CreatedAt)
	v.CreatedAt = createdAt
	id := int64(e.ID)
	v.Id = id
	isVerified := e.IsVerified
	v.IsVerified = isVerified
	value := e.Value
	v.Value = value
	if edg := e.Edges.User; edg != nil {
		id := int64(edg.ID)
		v.User = &User{
			Id: id,
		}
	}
	return v, nil
}

// toProtoUserEmailList transforms a list of ent type to a list of pb type
func toProtoUserEmailList(e []*ent.UserEmail) ([]*UserEmail, error) {
	var pbList []*UserEmail
	for _, entEntity := range e {
		pbEntity, err := toProtoUserEmail(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements UserEmailServiceServer.Create
func (svc *UserEmailService) Create(ctx context.Context, req *CreateUserEmailRequest) (*UserEmail, error) {
	useremail := req.GetUserEmail()
	m, err := svc.createBuilder(useremail)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoUserEmail(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements UserEmailServiceServer.Get
func (svc *UserEmailService) Get(ctx context.Context, req *GetUserEmailRequest) (*UserEmail, error) {
	var (
		err error
		get *ent.UserEmail
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetUserEmailRequest_VIEW_UNSPECIFIED, GetUserEmailRequest_BASIC:
		get, err = svc.client.UserEmail.Get(ctx, id)
	case GetUserEmailRequest_WITH_EDGE_IDS:
		get, err = svc.client.UserEmail.Query().
			Where(useremail.ID(id)).
			WithUser(func(query *ent.UserQuery) {
				query.Select(user.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoUserEmail(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements UserEmailServiceServer.Update
func (svc *UserEmailService) Update(ctx context.Context, req *UpdateUserEmailRequest) (*UserEmail, error) {
	useremail := req.GetUserEmail()
	useremailID := int(useremail.GetId())
	m := svc.client.UserEmail.UpdateOneID(useremailID)
	if useremail.GetUser() != nil {
		useremailUser := int(useremail.GetUser().GetId())
		m.SetUserID(useremailUser)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoUserEmail(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements UserEmailServiceServer.Delete
func (svc *UserEmailService) Delete(ctx context.Context, req *DeleteUserEmailRequest) (*emptypb.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.UserEmail.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements UserEmailServiceServer.List
func (svc *UserEmailService) List(ctx context.Context, req *ListUserEmailRequest) (*ListUserEmailResponse, error) {
	var (
		err      error
		entList  []*ent.UserEmail
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.UserEmail.Query().
		Order(ent.Desc(useremail.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		token, err := strconv.ParseInt(string(bytes), 10, 32)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken := int(token)
		listQuery = listQuery.
			Where(useremail.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListUserEmailRequest_VIEW_UNSPECIFIED, ListUserEmailRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListUserEmailRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithUser(func(query *ent.UserQuery) {
				query.Select(user.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoUserEmailList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListUserEmailResponse{
			UserEmailList: protoList,
			NextPageToken: nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements UserEmailServiceServer.BatchCreate
func (svc *UserEmailService) BatchCreate(ctx context.Context, req *BatchCreateUserEmailsRequest) (*BatchCreateUserEmailsResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.UserEmailCreate, len(requests))
	for i, req := range requests {
		useremail := req.GetUserEmail()
		var err error
		bulk[i], err = svc.createBuilder(useremail)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.UserEmail.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoUserEmailList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateUserEmailsResponse{
			UserEmails: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *UserEmailService) createBuilder(useremail *UserEmail) (*ent.UserEmailCreate, error) {
	m := svc.client.UserEmail.Create()
	useremailCreatedAt := runtime.ExtractTime(useremail.GetCreatedAt())
	m.SetCreatedAt(useremailCreatedAt)
	useremailIsVerified := useremail.GetIsVerified()
	m.SetIsVerified(useremailIsVerified)
	useremailValue := useremail.GetValue()
	m.SetValue(useremailValue)
	if useremail.GetUser() != nil {
		useremailUser := int(useremail.GetUser().GetId())
		m.SetUserID(useremailUser)
	}
	return m, nil
}
