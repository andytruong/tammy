// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	strconv "strconv"
	ent "tammy/ent"
	portal "tammy/ent/portal"
	portallegal "tammy/ent/portallegal"
)

// PortalLegalService implements PortalLegalServiceServer
type PortalLegalService struct {
	client *ent.Client
	UnimplementedPortalLegalServiceServer
}

// NewPortalLegalService returns a new PortalLegalService
func NewPortalLegalService(client *ent.Client) *PortalLegalService {
	return &PortalLegalService{
		client: client,
	}
}

// toProtoPortalLegal transforms the ent type to the pb type
func toProtoPortalLegal(e *ent.PortalLegal) (*PortalLegal, error) {
	v := &PortalLegal{}
	copyright := e.Copyright
	v.Copyright = copyright
	createdAt := timestamppb.New(e.CreatedAt)
	v.CreatedAt = createdAt
	id := int64(e.ID)
	v.Id = id
	onlineTrainingAgreement := e.OnlineTrainingAgreement
	v.OnlineTrainingAgreement = onlineTrainingAgreement
	privacyPolicy := e.PrivacyPolicy
	v.PrivacyPolicy = privacyPolicy
	termOfService := e.TermOfService
	v.TermOfService = termOfService
	updatedAt := timestamppb.New(e.UpdatedAt)
	v.UpdatedAt = updatedAt
	if edg := e.Edges.Portal; edg != nil {
		id := int64(edg.ID)
		v.Portal = &Portal{
			Id: id,
		}
	}
	return v, nil
}

// toProtoPortalLegalList transforms a list of ent type to a list of pb type
func toProtoPortalLegalList(e []*ent.PortalLegal) ([]*PortalLegal, error) {
	var pbList []*PortalLegal
	for _, entEntity := range e {
		pbEntity, err := toProtoPortalLegal(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements PortalLegalServiceServer.Create
func (svc *PortalLegalService) Create(ctx context.Context, req *CreatePortalLegalRequest) (*PortalLegal, error) {
	portallegal := req.GetPortalLegal()
	m, err := svc.createBuilder(portallegal)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoPortalLegal(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements PortalLegalServiceServer.Get
func (svc *PortalLegalService) Get(ctx context.Context, req *GetPortalLegalRequest) (*PortalLegal, error) {
	var (
		err error
		get *ent.PortalLegal
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetPortalLegalRequest_VIEW_UNSPECIFIED, GetPortalLegalRequest_BASIC:
		get, err = svc.client.PortalLegal.Get(ctx, id)
	case GetPortalLegalRequest_WITH_EDGE_IDS:
		get, err = svc.client.PortalLegal.Query().
			Where(portallegal.ID(id)).
			WithPortal(func(query *ent.PortalQuery) {
				query.Select(portal.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoPortalLegal(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements PortalLegalServiceServer.Update
func (svc *PortalLegalService) Update(ctx context.Context, req *UpdatePortalLegalRequest) (*PortalLegal, error) {
	portallegal := req.GetPortalLegal()
	portallegalID := int(portallegal.GetId())
	m := svc.client.PortalLegal.UpdateOneID(portallegalID)
	portallegalCopyright := portallegal.GetCopyright()
	m.SetCopyright(portallegalCopyright)
	portallegalOnlineTrainingAgreement := portallegal.GetOnlineTrainingAgreement()
	m.SetOnlineTrainingAgreement(portallegalOnlineTrainingAgreement)
	portallegalPrivacyPolicy := portallegal.GetPrivacyPolicy()
	m.SetPrivacyPolicy(portallegalPrivacyPolicy)
	portallegalTermOfService := portallegal.GetTermOfService()
	m.SetTermOfService(portallegalTermOfService)
	portallegalUpdatedAt := runtime.ExtractTime(portallegal.GetUpdatedAt())
	m.SetUpdatedAt(portallegalUpdatedAt)
	if portallegal.GetPortal() != nil {
		portallegalPortal := int(portallegal.GetPortal().GetId())
		m.SetPortalID(portallegalPortal)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoPortalLegal(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements PortalLegalServiceServer.Delete
func (svc *PortalLegalService) Delete(ctx context.Context, req *DeletePortalLegalRequest) (*emptypb.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.PortalLegal.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements PortalLegalServiceServer.List
func (svc *PortalLegalService) List(ctx context.Context, req *ListPortalLegalRequest) (*ListPortalLegalResponse, error) {
	var (
		err      error
		entList  []*ent.PortalLegal
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.PortalLegal.Query().
		Order(ent.Desc(portallegal.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		token, err := strconv.ParseInt(string(bytes), 10, 32)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken := int(token)
		listQuery = listQuery.
			Where(portallegal.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListPortalLegalRequest_VIEW_UNSPECIFIED, ListPortalLegalRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListPortalLegalRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithPortal(func(query *ent.PortalQuery) {
				query.Select(portal.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoPortalLegalList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListPortalLegalResponse{
			PortalLegalList: protoList,
			NextPageToken:   nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements PortalLegalServiceServer.BatchCreate
func (svc *PortalLegalService) BatchCreate(ctx context.Context, req *BatchCreatePortalLegalsRequest) (*BatchCreatePortalLegalsResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.PortalLegalCreate, len(requests))
	for i, req := range requests {
		portallegal := req.GetPortalLegal()
		var err error
		bulk[i], err = svc.createBuilder(portallegal)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.PortalLegal.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoPortalLegalList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreatePortalLegalsResponse{
			PortalLegals: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *PortalLegalService) createBuilder(portallegal *PortalLegal) (*ent.PortalLegalCreate, error) {
	m := svc.client.PortalLegal.Create()
	portallegalCopyright := portallegal.GetCopyright()
	m.SetCopyright(portallegalCopyright)
	portallegalCreatedAt := runtime.ExtractTime(portallegal.GetCreatedAt())
	m.SetCreatedAt(portallegalCreatedAt)
	portallegalOnlineTrainingAgreement := portallegal.GetOnlineTrainingAgreement()
	m.SetOnlineTrainingAgreement(portallegalOnlineTrainingAgreement)
	portallegalPrivacyPolicy := portallegal.GetPrivacyPolicy()
	m.SetPrivacyPolicy(portallegalPrivacyPolicy)
	portallegalTermOfService := portallegal.GetTermOfService()
	m.SetTermOfService(portallegalTermOfService)
	portallegalUpdatedAt := runtime.ExtractTime(portallegal.GetUpdatedAt())
	m.SetUpdatedAt(portallegalUpdatedAt)
	if portallegal.GetPortal() != nil {
		portallegalPortal := int(portallegal.GetPortal().GetId())
		m.SetPortalID(portallegalPortal)
	}
	return m, nil
}
