// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"tammy/ent/user"
	"tammy/ent/useremail"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserEmailCreate is the builder for creating a UserEmail entity.
type UserEmailCreate struct {
	config
	mutation *UserEmailMutation
	hooks    []Hook
}

// SetValue sets the "value" field.
func (uec *UserEmailCreate) SetValue(s string) *UserEmailCreate {
	uec.mutation.SetValue(s)
	return uec
}

// SetCreatedAt sets the "createdAt" field.
func (uec *UserEmailCreate) SetCreatedAt(t time.Time) *UserEmailCreate {
	uec.mutation.SetCreatedAt(t)
	return uec
}

// SetIsVerified sets the "isVerified" field.
func (uec *UserEmailCreate) SetIsVerified(b bool) *UserEmailCreate {
	uec.mutation.SetIsVerified(b)
	return uec
}

// SetID sets the "id" field.
func (uec *UserEmailCreate) SetID(i int) *UserEmailCreate {
	uec.mutation.SetID(i)
	return uec
}

// SetUserID sets the "user" edge to the User entity by ID.
func (uec *UserEmailCreate) SetUserID(id int) *UserEmailCreate {
	uec.mutation.SetUserID(id)
	return uec
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (uec *UserEmailCreate) SetNillableUserID(id *int) *UserEmailCreate {
	if id != nil {
		uec = uec.SetUserID(*id)
	}
	return uec
}

// SetUser sets the "user" edge to the User entity.
func (uec *UserEmailCreate) SetUser(u *User) *UserEmailCreate {
	return uec.SetUserID(u.ID)
}

// Mutation returns the UserEmailMutation object of the builder.
func (uec *UserEmailCreate) Mutation() *UserEmailMutation {
	return uec.mutation
}

// Save creates the UserEmail in the database.
func (uec *UserEmailCreate) Save(ctx context.Context) (*UserEmail, error) {
	var (
		err  error
		node *UserEmail
	)
	if len(uec.hooks) == 0 {
		if err = uec.check(); err != nil {
			return nil, err
		}
		node, err = uec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserEmailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uec.check(); err != nil {
				return nil, err
			}
			uec.mutation = mutation
			if node, err = uec.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(uec.hooks) - 1; i >= 0; i-- {
			if uec.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uec.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, uec.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*UserEmail)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserEmailMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uec *UserEmailCreate) SaveX(ctx context.Context) *UserEmail {
	v, err := uec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uec *UserEmailCreate) Exec(ctx context.Context) error {
	_, err := uec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uec *UserEmailCreate) ExecX(ctx context.Context) {
	if err := uec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uec *UserEmailCreate) check() error {
	if _, ok := uec.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "UserEmail.value"`)}
	}
	if _, ok := uec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "UserEmail.createdAt"`)}
	}
	if _, ok := uec.mutation.IsVerified(); !ok {
		return &ValidationError{Name: "isVerified", err: errors.New(`ent: missing required field "UserEmail.isVerified"`)}
	}
	return nil
}

func (uec *UserEmailCreate) sqlSave(ctx context.Context) (*UserEmail, error) {
	_node, _spec := uec.createSpec()
	if err := sqlgraph.CreateNode(ctx, uec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (uec *UserEmailCreate) createSpec() (*UserEmail, *sqlgraph.CreateSpec) {
	var (
		_node = &UserEmail{config: uec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: useremail.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: useremail.FieldID,
			},
		}
	)
	if id, ok := uec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uec.mutation.Value(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: useremail.FieldValue,
		})
		_node.Value = value
	}
	if value, ok := uec.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useremail.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := uec.mutation.IsVerified(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: useremail.FieldIsVerified,
		})
		_node.IsVerified = value
	}
	if nodes := uec.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useremail.UserTable,
			Columns: []string{useremail.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_emails = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserEmailCreateBulk is the builder for creating many UserEmail entities in bulk.
type UserEmailCreateBulk struct {
	config
	builders []*UserEmailCreate
}

// Save creates the UserEmail entities in the database.
func (uecb *UserEmailCreateBulk) Save(ctx context.Context) ([]*UserEmail, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uecb.builders))
	nodes := make([]*UserEmail, len(uecb.builders))
	mutators := make([]Mutator, len(uecb.builders))
	for i := range uecb.builders {
		func(i int, root context.Context) {
			builder := uecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserEmailMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uecb *UserEmailCreateBulk) SaveX(ctx context.Context) []*UserEmail {
	v, err := uecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uecb *UserEmailCreateBulk) Exec(ctx context.Context) error {
	_, err := uecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uecb *UserEmailCreateBulk) ExecX(ctx context.Context) {
	if err := uecb.Exec(ctx); err != nil {
		panic(err)
	}
}
