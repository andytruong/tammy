// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"tammy/ent/account"
	"tammy/ent/accountfield"
	"tammy/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccountFieldQuery is the builder for querying AccountField entities.
type AccountFieldQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.AccountField
	// eager-loading edges.
	withAccount *AccountQuery
	withFKs     bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AccountFieldQuery builder.
func (afq *AccountFieldQuery) Where(ps ...predicate.AccountField) *AccountFieldQuery {
	afq.predicates = append(afq.predicates, ps...)
	return afq
}

// Limit adds a limit step to the query.
func (afq *AccountFieldQuery) Limit(limit int) *AccountFieldQuery {
	afq.limit = &limit
	return afq
}

// Offset adds an offset step to the query.
func (afq *AccountFieldQuery) Offset(offset int) *AccountFieldQuery {
	afq.offset = &offset
	return afq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (afq *AccountFieldQuery) Unique(unique bool) *AccountFieldQuery {
	afq.unique = &unique
	return afq
}

// Order adds an order step to the query.
func (afq *AccountFieldQuery) Order(o ...OrderFunc) *AccountFieldQuery {
	afq.order = append(afq.order, o...)
	return afq
}

// QueryAccount chains the current query on the "account" edge.
func (afq *AccountFieldQuery) QueryAccount() *AccountQuery {
	query := &AccountQuery{config: afq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := afq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := afq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(accountfield.Table, accountfield.FieldID, selector),
			sqlgraph.To(account.Table, account.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, accountfield.AccountTable, accountfield.AccountColumn),
		)
		fromU = sqlgraph.SetNeighbors(afq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AccountField entity from the query.
// Returns a *NotFoundError when no AccountField was found.
func (afq *AccountFieldQuery) First(ctx context.Context) (*AccountField, error) {
	nodes, err := afq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{accountfield.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (afq *AccountFieldQuery) FirstX(ctx context.Context) *AccountField {
	node, err := afq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AccountField ID from the query.
// Returns a *NotFoundError when no AccountField ID was found.
func (afq *AccountFieldQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = afq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{accountfield.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (afq *AccountFieldQuery) FirstIDX(ctx context.Context) int {
	id, err := afq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AccountField entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AccountField entity is found.
// Returns a *NotFoundError when no AccountField entities are found.
func (afq *AccountFieldQuery) Only(ctx context.Context) (*AccountField, error) {
	nodes, err := afq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{accountfield.Label}
	default:
		return nil, &NotSingularError{accountfield.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (afq *AccountFieldQuery) OnlyX(ctx context.Context) *AccountField {
	node, err := afq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AccountField ID in the query.
// Returns a *NotSingularError when more than one AccountField ID is found.
// Returns a *NotFoundError when no entities are found.
func (afq *AccountFieldQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = afq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{accountfield.Label}
	default:
		err = &NotSingularError{accountfield.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (afq *AccountFieldQuery) OnlyIDX(ctx context.Context) int {
	id, err := afq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AccountFields.
func (afq *AccountFieldQuery) All(ctx context.Context) ([]*AccountField, error) {
	if err := afq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return afq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (afq *AccountFieldQuery) AllX(ctx context.Context) []*AccountField {
	nodes, err := afq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AccountField IDs.
func (afq *AccountFieldQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := afq.Select(accountfield.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (afq *AccountFieldQuery) IDsX(ctx context.Context) []int {
	ids, err := afq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (afq *AccountFieldQuery) Count(ctx context.Context) (int, error) {
	if err := afq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return afq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (afq *AccountFieldQuery) CountX(ctx context.Context) int {
	count, err := afq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (afq *AccountFieldQuery) Exist(ctx context.Context) (bool, error) {
	if err := afq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return afq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (afq *AccountFieldQuery) ExistX(ctx context.Context) bool {
	exist, err := afq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AccountFieldQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (afq *AccountFieldQuery) Clone() *AccountFieldQuery {
	if afq == nil {
		return nil
	}
	return &AccountFieldQuery{
		config:      afq.config,
		limit:       afq.limit,
		offset:      afq.offset,
		order:       append([]OrderFunc{}, afq.order...),
		predicates:  append([]predicate.AccountField{}, afq.predicates...),
		withAccount: afq.withAccount.Clone(),
		// clone intermediate query.
		sql:    afq.sql.Clone(),
		path:   afq.path,
		unique: afq.unique,
	}
}

// WithAccount tells the query-builder to eager-load the nodes that are connected to
// the "account" edge. The optional arguments are used to configure the query builder of the edge.
func (afq *AccountFieldQuery) WithAccount(opts ...func(*AccountQuery)) *AccountFieldQuery {
	query := &AccountQuery{config: afq.config}
	for _, opt := range opts {
		opt(query)
	}
	afq.withAccount = query
	return afq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Fid int `json:"fid,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AccountField.Query().
//		GroupBy(accountfield.FieldFid).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (afq *AccountFieldQuery) GroupBy(field string, fields ...string) *AccountFieldGroupBy {
	grbuild := &AccountFieldGroupBy{config: afq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := afq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return afq.sqlQuery(ctx), nil
	}
	grbuild.label = accountfield.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Fid int `json:"fid,omitempty"`
//	}
//
//	client.AccountField.Query().
//		Select(accountfield.FieldFid).
//		Scan(ctx, &v)
//
func (afq *AccountFieldQuery) Select(fields ...string) *AccountFieldSelect {
	afq.fields = append(afq.fields, fields...)
	selbuild := &AccountFieldSelect{AccountFieldQuery: afq}
	selbuild.label = accountfield.Label
	selbuild.flds, selbuild.scan = &afq.fields, selbuild.Scan
	return selbuild
}

func (afq *AccountFieldQuery) prepareQuery(ctx context.Context) error {
	for _, f := range afq.fields {
		if !accountfield.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if afq.path != nil {
		prev, err := afq.path(ctx)
		if err != nil {
			return err
		}
		afq.sql = prev
	}
	return nil
}

func (afq *AccountFieldQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AccountField, error) {
	var (
		nodes       = []*AccountField{}
		withFKs     = afq.withFKs
		_spec       = afq.querySpec()
		loadedTypes = [1]bool{
			afq.withAccount != nil,
		}
	)
	if afq.withAccount != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, accountfield.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*AccountField).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &AccountField{config: afq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, afq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := afq.withAccount; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*AccountField)
		for i := range nodes {
			if nodes[i].account_fields == nil {
				continue
			}
			fk := *nodes[i].account_fields
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(account.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "account_fields" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Account = n
			}
		}
	}

	return nodes, nil
}

func (afq *AccountFieldQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := afq.querySpec()
	_spec.Node.Columns = afq.fields
	if len(afq.fields) > 0 {
		_spec.Unique = afq.unique != nil && *afq.unique
	}
	return sqlgraph.CountNodes(ctx, afq.driver, _spec)
}

func (afq *AccountFieldQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := afq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (afq *AccountFieldQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   accountfield.Table,
			Columns: accountfield.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: accountfield.FieldID,
			},
		},
		From:   afq.sql,
		Unique: true,
	}
	if unique := afq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := afq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accountfield.FieldID)
		for i := range fields {
			if fields[i] != accountfield.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := afq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := afq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := afq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := afq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (afq *AccountFieldQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(afq.driver.Dialect())
	t1 := builder.Table(accountfield.Table)
	columns := afq.fields
	if len(columns) == 0 {
		columns = accountfield.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if afq.sql != nil {
		selector = afq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if afq.unique != nil && *afq.unique {
		selector.Distinct()
	}
	for _, p := range afq.predicates {
		p(selector)
	}
	for _, p := range afq.order {
		p(selector)
	}
	if offset := afq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := afq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AccountFieldGroupBy is the group-by builder for AccountField entities.
type AccountFieldGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (afgb *AccountFieldGroupBy) Aggregate(fns ...AggregateFunc) *AccountFieldGroupBy {
	afgb.fns = append(afgb.fns, fns...)
	return afgb
}

// Scan applies the group-by query and scans the result into the given value.
func (afgb *AccountFieldGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := afgb.path(ctx)
	if err != nil {
		return err
	}
	afgb.sql = query
	return afgb.sqlScan(ctx, v)
}

func (afgb *AccountFieldGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range afgb.fields {
		if !accountfield.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := afgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := afgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (afgb *AccountFieldGroupBy) sqlQuery() *sql.Selector {
	selector := afgb.sql.Select()
	aggregation := make([]string, 0, len(afgb.fns))
	for _, fn := range afgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(afgb.fields)+len(afgb.fns))
		for _, f := range afgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(afgb.fields...)...)
}

// AccountFieldSelect is the builder for selecting fields of AccountField entities.
type AccountFieldSelect struct {
	*AccountFieldQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (afs *AccountFieldSelect) Scan(ctx context.Context, v interface{}) error {
	if err := afs.prepareQuery(ctx); err != nil {
		return err
	}
	afs.sql = afs.AccountFieldQuery.sqlQuery(ctx)
	return afs.sqlScan(ctx, v)
}

func (afs *AccountFieldSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := afs.sql.Query()
	if err := afs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
