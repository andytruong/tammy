// Code generated by ent, DO NOT EDIT.

package store

import (
	"context"
	"errors"
	"fmt"
	"tammy/pkg/store/portal"
	"tammy/pkg/store/portalmetadata"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PortalMetadataCreate is the builder for creating a PortalMetadata entity.
type PortalMetadataCreate struct {
	config
	mutation *PortalMetadataMutation
	hooks    []Hook
}

// SetCreatedAt sets the "createdAt" field.
func (pmc *PortalMetadataCreate) SetCreatedAt(t time.Time) *PortalMetadataCreate {
	pmc.mutation.SetCreatedAt(t)
	return pmc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (pmc *PortalMetadataCreate) SetNillableCreatedAt(t *time.Time) *PortalMetadataCreate {
	if t != nil {
		pmc.SetCreatedAt(*t)
	}
	return pmc
}

// SetUpdatedAt sets the "updatedAt" field.
func (pmc *PortalMetadataCreate) SetUpdatedAt(t time.Time) *PortalMetadataCreate {
	pmc.mutation.SetUpdatedAt(t)
	return pmc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (pmc *PortalMetadataCreate) SetNillableUpdatedAt(t *time.Time) *PortalMetadataCreate {
	if t != nil {
		pmc.SetUpdatedAt(*t)
	}
	return pmc
}

// SetKind sets the "kind" field.
func (pmc *PortalMetadataCreate) SetKind(po portalmetadata.Kind) *PortalMetadataCreate {
	pmc.mutation.SetKind(po)
	return pmc
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (pmc *PortalMetadataCreate) SetNillableKind(po *portalmetadata.Kind) *PortalMetadataCreate {
	if po != nil {
		pmc.SetKind(*po)
	}
	return pmc
}

// SetLifecycle sets the "lifecycle" field.
func (pmc *PortalMetadataCreate) SetLifecycle(po portalmetadata.Lifecycle) *PortalMetadataCreate {
	pmc.mutation.SetLifecycle(po)
	return pmc
}

// SetID sets the "id" field.
func (pmc *PortalMetadataCreate) SetID(u uint32) *PortalMetadataCreate {
	pmc.mutation.SetID(u)
	return pmc
}

// SetPortalID sets the "portal" edge to the Portal entity by ID.
func (pmc *PortalMetadataCreate) SetPortalID(id uint32) *PortalMetadataCreate {
	pmc.mutation.SetPortalID(id)
	return pmc
}

// SetPortal sets the "portal" edge to the Portal entity.
func (pmc *PortalMetadataCreate) SetPortal(p *Portal) *PortalMetadataCreate {
	return pmc.SetPortalID(p.ID)
}

// Mutation returns the PortalMetadataMutation object of the builder.
func (pmc *PortalMetadataCreate) Mutation() *PortalMetadataMutation {
	return pmc.mutation
}

// Save creates the PortalMetadata in the database.
func (pmc *PortalMetadataCreate) Save(ctx context.Context) (*PortalMetadata, error) {
	var (
		err  error
		node *PortalMetadata
	)
	pmc.defaults()
	if len(pmc.hooks) == 0 {
		if err = pmc.check(); err != nil {
			return nil, err
		}
		node, err = pmc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PortalMetadataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pmc.check(); err != nil {
				return nil, err
			}
			pmc.mutation = mutation
			if node, err = pmc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pmc.hooks) - 1; i >= 0; i-- {
			if pmc.hooks[i] == nil {
				return nil, fmt.Errorf("store: uninitialized hook (forgotten import store/runtime?)")
			}
			mut = pmc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pmc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PortalMetadata)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PortalMetadataMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pmc *PortalMetadataCreate) SaveX(ctx context.Context) *PortalMetadata {
	v, err := pmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmc *PortalMetadataCreate) Exec(ctx context.Context) error {
	_, err := pmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmc *PortalMetadataCreate) ExecX(ctx context.Context) {
	if err := pmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmc *PortalMetadataCreate) defaults() {
	if _, ok := pmc.mutation.CreatedAt(); !ok {
		v := portalmetadata.DefaultCreatedAt()
		pmc.mutation.SetCreatedAt(v)
	}
	if _, ok := pmc.mutation.UpdatedAt(); !ok {
		v := portalmetadata.DefaultUpdatedAt()
		pmc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pmc.mutation.Kind(); !ok {
		v := portalmetadata.DefaultKind
		pmc.mutation.SetKind(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmc *PortalMetadataCreate) check() error {
	if _, ok := pmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`store: missing required field "PortalMetadata.createdAt"`)}
	}
	if _, ok := pmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`store: missing required field "PortalMetadata.updatedAt"`)}
	}
	if _, ok := pmc.mutation.Kind(); !ok {
		return &ValidationError{Name: "kind", err: errors.New(`store: missing required field "PortalMetadata.kind"`)}
	}
	if v, ok := pmc.mutation.Kind(); ok {
		if err := portalmetadata.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`store: validator failed for field "PortalMetadata.kind": %w`, err)}
		}
	}
	if _, ok := pmc.mutation.Lifecycle(); !ok {
		return &ValidationError{Name: "lifecycle", err: errors.New(`store: missing required field "PortalMetadata.lifecycle"`)}
	}
	if v, ok := pmc.mutation.Lifecycle(); ok {
		if err := portalmetadata.LifecycleValidator(v); err != nil {
			return &ValidationError{Name: "lifecycle", err: fmt.Errorf(`store: validator failed for field "PortalMetadata.lifecycle": %w`, err)}
		}
	}
	if _, ok := pmc.mutation.PortalID(); !ok {
		return &ValidationError{Name: "portal", err: errors.New(`store: missing required edge "PortalMetadata.portal"`)}
	}
	return nil
}

func (pmc *PortalMetadataCreate) sqlSave(ctx context.Context) (*PortalMetadata, error) {
	_node, _spec := pmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (pmc *PortalMetadataCreate) createSpec() (*PortalMetadata, *sqlgraph.CreateSpec) {
	var (
		_node = &PortalMetadata{config: pmc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: portalmetadata.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: portalmetadata.FieldID,
			},
		}
	)
	if id, ok := pmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pmc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: portalmetadata.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pmc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: portalmetadata.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := pmc.mutation.Kind(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: portalmetadata.FieldKind,
		})
		_node.Kind = value
	}
	if value, ok := pmc.mutation.Lifecycle(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: portalmetadata.FieldLifecycle,
		})
		_node.Lifecycle = value
	}
	if nodes := pmc.mutation.PortalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portalmetadata.PortalTable,
			Columns: []string{portalmetadata.PortalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint32,
					Column: portal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.portal_metadata = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PortalMetadataCreateBulk is the builder for creating many PortalMetadata entities in bulk.
type PortalMetadataCreateBulk struct {
	config
	builders []*PortalMetadataCreate
}

// Save creates the PortalMetadata entities in the database.
func (pmcb *PortalMetadataCreateBulk) Save(ctx context.Context) ([]*PortalMetadata, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pmcb.builders))
	nodes := make([]*PortalMetadata, len(pmcb.builders))
	mutators := make([]Mutator, len(pmcb.builders))
	for i := range pmcb.builders {
		func(i int, root context.Context) {
			builder := pmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PortalMetadataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pmcb *PortalMetadataCreateBulk) SaveX(ctx context.Context) []*PortalMetadata {
	v, err := pmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmcb *PortalMetadataCreateBulk) Exec(ctx context.Context) error {
	_, err := pmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmcb *PortalMetadataCreateBulk) ExecX(ctx context.Context) {
	if err := pmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
