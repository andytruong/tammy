// Code generated by ent, DO NOT EDIT.

package portalmetadata

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the portalmetadata type in the database.
	Label = "portal_metadata"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldKind holds the string denoting the kind field in the database.
	FieldKind = "kind"
	// FieldLifecycle holds the string denoting the lifecycle field in the database.
	FieldLifecycle = "lifecycle"
	// EdgePortal holds the string denoting the portal edge name in mutations.
	EdgePortal = "portal"
	// Table holds the table name of the portalmetadata in the database.
	Table = "portal_metadata"
	// PortalTable is the table that holds the portal relation/edge.
	PortalTable = "portal_metadata"
	// PortalInverseTable is the table name for the Portal entity.
	// It exists in this package in order to avoid circular dependency with the "portal" package.
	PortalInverseTable = "portals"
	// PortalColumn is the table column denoting the portal relation/edge.
	PortalColumn = "portal_metadata"
)

// Columns holds all SQL columns for portalmetadata fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldKind,
	FieldLifecycle,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "portal_metadata"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"portal_metadata",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
)

// Kind defines the type for the "kind" enum field.
type Kind string

// KindKIND_DEVELOPMENT is the default value of the Kind enum.
const DefaultKind = KindKIND_DEVELOPMENT

// Kind values.
const (
	KindKIND_DEVELOPMENT          Kind = "KIND_DEVELOPMENT"
	KindKIND_INTERNAL             Kind = "KIND_INTERNAL"
	KindKIND_CONTENT_PARTNER      Kind = "KIND_CONTENT_PARTNER"
	KindKIND_DISTRIBUTION_PARTNER Kind = "KIND_DISTRIBUTION_PARTNER"
	KindKIND_CUSTOMER             Kind = "KIND_CUSTOMER"
	KindKIND_TEAM                 Kind = "KIND_TEAM"
	KindKIND_BIG_PARTNER          Kind = "KIND_BIG_PARTNER"
)

func (k Kind) String() string {
	return string(k)
}

// KindValidator is a validator for the "kind" field enum values. It is called by the builders before save.
func KindValidator(k Kind) error {
	switch k {
	case KindKIND_DEVELOPMENT, KindKIND_INTERNAL, KindKIND_CONTENT_PARTNER, KindKIND_DISTRIBUTION_PARTNER, KindKIND_CUSTOMER, KindKIND_TEAM, KindKIND_BIG_PARTNER:
		return nil
	default:
		return fmt.Errorf("portalmetadata: invalid enum value for kind field: %q", k)
	}
}

// Lifecycle defines the type for the "lifecycle" enum field.
type Lifecycle string

// LifecycleLIFECYCLE_TRIAL is the default value of the Lifecycle enum.
const DefaultLifecycle = LifecycleLIFECYCLE_TRIAL

// Lifecycle values.
const (
	LifecycleLIFECYCLE_TRIAL         Lifecycle = "LIFECYCLE_TRIAL"
	LifecycleLIFECYCLE_ONBOARD       Lifecycle = "LIFECYCLE_ONBOARD"
	LifecycleLIFECYCLE_LIVE          Lifecycle = "LIFECYCLE_LIVE"
	LifecycleLIFECYCLE_EXPIRED_TRIAL Lifecycle = "LIFECYCLE_EXPIRED_TRIAL"
	LifecycleLIFECYCLE_SUSPENDED     Lifecycle = "LIFECYCLE_SUSPENDED"
	LifecycleLIFECYCLE_CANCELLED     Lifecycle = "LIFECYCLE_CANCELLED"
	LifecycleLIFECYCLE_TEST          Lifecycle = "LIFECYCLE_TEST"
	LifecycleLIFECYCLE_SAMPLE        Lifecycle = "LIFECYCLE_SAMPLE"
	LifecycleLIFECYCLE_TEMPLATE      Lifecycle = "LIFECYCLE_TEMPLATE"
)

func (l Lifecycle) String() string {
	return string(l)
}

// LifecycleValidator is a validator for the "lifecycle" field enum values. It is called by the builders before save.
func LifecycleValidator(l Lifecycle) error {
	switch l {
	case LifecycleLIFECYCLE_TRIAL, LifecycleLIFECYCLE_ONBOARD, LifecycleLIFECYCLE_LIVE, LifecycleLIFECYCLE_EXPIRED_TRIAL, LifecycleLIFECYCLE_SUSPENDED, LifecycleLIFECYCLE_CANCELLED, LifecycleLIFECYCLE_TEST, LifecycleLIFECYCLE_SAMPLE, LifecycleLIFECYCLE_TEMPLATE:
		return nil
	default:
		return fmt.Errorf("portalmetadata: invalid enum value for lifecycle field: %q", l)
	}
}
