// Code generated by ent, DO NOT EDIT.

package store

import (
	"fmt"
	"strings"
	"tammy/pkg/store/portal"
	"tammy/pkg/store/portallegal"
	"time"

	"entgo.io/ent/dialect/sql"
)

// PortalLegal is the model entity for the PortalLegal schema.
type PortalLegal struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// PrivacyPolicy holds the value of the "privacyPolicy" field.
	PrivacyPolicy string `json:"privacyPolicy,omitempty"`
	// TermOfService holds the value of the "termOfService" field.
	TermOfService string `json:"termOfService,omitempty"`
	// Copyright holds the value of the "copyright" field.
	Copyright string `json:"copyright,omitempty"`
	// OnlineTrainingAgreement holds the value of the "onlineTrainingAgreement" field.
	OnlineTrainingAgreement string `json:"onlineTrainingAgreement,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PortalLegalQuery when eager-loading is set.
	Edges        PortalLegalEdges `json:"edges"`
	portal_legal *uint32
}

// PortalLegalEdges holds the relations/edges for other nodes in the graph.
type PortalLegalEdges struct {
	// Portal holds the value of the portal edge.
	Portal *Portal `json:"portal,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PortalOrErr returns the Portal value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PortalLegalEdges) PortalOrErr() (*Portal, error) {
	if e.loadedTypes[0] {
		if e.Portal == nil {
			// The edge portal was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: portal.Label}
		}
		return e.Portal, nil
	}
	return nil, &NotLoadedError{edge: "portal"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PortalLegal) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case portallegal.FieldID:
			values[i] = new(sql.NullInt64)
		case portallegal.FieldPrivacyPolicy, portallegal.FieldTermOfService, portallegal.FieldCopyright, portallegal.FieldOnlineTrainingAgreement:
			values[i] = new(sql.NullString)
		case portallegal.FieldCreatedAt, portallegal.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case portallegal.ForeignKeys[0]: // portal_legal
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PortalLegal", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PortalLegal fields.
func (pl *PortalLegal) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case portallegal.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pl.ID = uint32(value.Int64)
		case portallegal.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				pl.CreatedAt = value.Time
			}
		case portallegal.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				pl.UpdatedAt = value.Time
			}
		case portallegal.FieldPrivacyPolicy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field privacyPolicy", values[i])
			} else if value.Valid {
				pl.PrivacyPolicy = value.String
			}
		case portallegal.FieldTermOfService:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field termOfService", values[i])
			} else if value.Valid {
				pl.TermOfService = value.String
			}
		case portallegal.FieldCopyright:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field copyright", values[i])
			} else if value.Valid {
				pl.Copyright = value.String
			}
		case portallegal.FieldOnlineTrainingAgreement:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field onlineTrainingAgreement", values[i])
			} else if value.Valid {
				pl.OnlineTrainingAgreement = value.String
			}
		case portallegal.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field portal_legal", value)
			} else if value.Valid {
				pl.portal_legal = new(uint32)
				*pl.portal_legal = uint32(value.Int64)
			}
		}
	}
	return nil
}

// QueryPortal queries the "portal" edge of the PortalLegal entity.
func (pl *PortalLegal) QueryPortal() *PortalQuery {
	return (&PortalLegalClient{config: pl.config}).QueryPortal(pl)
}

// Update returns a builder for updating this PortalLegal.
// Note that you need to call PortalLegal.Unwrap() before calling this method if this PortalLegal
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *PortalLegal) Update() *PortalLegalUpdateOne {
	return (&PortalLegalClient{config: pl.config}).UpdateOne(pl)
}

// Unwrap unwraps the PortalLegal entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pl *PortalLegal) Unwrap() *PortalLegal {
	_tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("store: PortalLegal is not a transactional entity")
	}
	pl.config.driver = _tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *PortalLegal) String() string {
	var builder strings.Builder
	builder.WriteString("PortalLegal(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pl.ID))
	builder.WriteString("createdAt=")
	builder.WriteString(pl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(pl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("privacyPolicy=")
	builder.WriteString(pl.PrivacyPolicy)
	builder.WriteString(", ")
	builder.WriteString("termOfService=")
	builder.WriteString(pl.TermOfService)
	builder.WriteString(", ")
	builder.WriteString("copyright=")
	builder.WriteString(pl.Copyright)
	builder.WriteString(", ")
	builder.WriteString("onlineTrainingAgreement=")
	builder.WriteString(pl.OnlineTrainingAgreement)
	builder.WriteByte(')')
	return builder.String()
}

// PortalLegals is a parsable slice of PortalLegal.
type PortalLegals []*PortalLegal

func (pl PortalLegals) config(cfg config) {
	for _i := range pl {
		pl[_i].config = cfg
	}
}
