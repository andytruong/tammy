// Code generated by ent, DO NOT EDIT.

package store

import (
	"fmt"
	"strings"
	"tammy/pkg/store/user"
	"tammy/pkg/store/userpassword"

	"entgo.io/ent/dialect/sql"
)

// UserPassword is the model entity for the UserPassword schema.
type UserPassword struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// UserId holds the value of the "userId" field.
	UserId uint32 `json:"userId,omitempty"`
	// HashedValue holds the value of the "hashedValue" field.
	HashedValue string `json:"hashedValue,omitempty"`
	// IsActive holds the value of the "isActive" field.
	IsActive bool `json:"isActive,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt uint32 `json:"createdAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserPasswordQuery when eager-loading is set.
	Edges         UserPasswordEdges `json:"edges"`
	user_password *uint32
}

// UserPasswordEdges holds the relations/edges for other nodes in the graph.
type UserPasswordEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserPasswordEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserPassword) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case userpassword.FieldIsActive:
			values[i] = new(sql.NullBool)
		case userpassword.FieldID, userpassword.FieldUserId, userpassword.FieldCreatedAt:
			values[i] = new(sql.NullInt64)
		case userpassword.FieldHashedValue:
			values[i] = new(sql.NullString)
		case userpassword.ForeignKeys[0]: // user_password
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserPassword", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserPassword fields.
func (up *UserPassword) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userpassword.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			up.ID = uint32(value.Int64)
		case userpassword.FieldUserId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field userId", values[i])
			} else if value.Valid {
				up.UserId = uint32(value.Int64)
			}
		case userpassword.FieldHashedValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hashedValue", values[i])
			} else if value.Valid {
				up.HashedValue = value.String
			}
		case userpassword.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isActive", values[i])
			} else if value.Valid {
				up.IsActive = value.Bool
			}
		case userpassword.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				up.CreatedAt = uint32(value.Int64)
			}
		case userpassword.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_password", value)
			} else if value.Valid {
				up.user_password = new(uint32)
				*up.user_password = uint32(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the UserPassword entity.
func (up *UserPassword) QueryUser() *UserQuery {
	return (&UserPasswordClient{config: up.config}).QueryUser(up)
}

// Update returns a builder for updating this UserPassword.
// Note that you need to call UserPassword.Unwrap() before calling this method if this UserPassword
// was returned from a transaction, and the transaction was committed or rolled back.
func (up *UserPassword) Update() *UserPasswordUpdateOne {
	return (&UserPasswordClient{config: up.config}).UpdateOne(up)
}

// Unwrap unwraps the UserPassword entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (up *UserPassword) Unwrap() *UserPassword {
	_tx, ok := up.config.driver.(*txDriver)
	if !ok {
		panic("store: UserPassword is not a transactional entity")
	}
	up.config.driver = _tx.drv
	return up
}

// String implements the fmt.Stringer.
func (up *UserPassword) String() string {
	var builder strings.Builder
	builder.WriteString("UserPassword(")
	builder.WriteString(fmt.Sprintf("id=%v, ", up.ID))
	builder.WriteString("userId=")
	builder.WriteString(fmt.Sprintf("%v", up.UserId))
	builder.WriteString(", ")
	builder.WriteString("hashedValue=")
	builder.WriteString(up.HashedValue)
	builder.WriteString(", ")
	builder.WriteString("isActive=")
	builder.WriteString(fmt.Sprintf("%v", up.IsActive))
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", up.CreatedAt))
	builder.WriteByte(')')
	return builder.String()
}

// UserPasswords is a parsable slice of UserPassword.
type UserPasswords []*UserPassword

func (up UserPasswords) config(cfg config) {
	for _i := range up {
		up[_i].config = cfg
	}
}
