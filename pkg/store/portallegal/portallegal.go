// Code generated by ent, DO NOT EDIT.

package portallegal

const (
	// Label holds the string label denoting the portallegal type in the database.
	Label = "portal_legal"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldPrivacyPolicy holds the string denoting the privacypolicy field in the database.
	FieldPrivacyPolicy = "privacy_policy"
	// FieldTermOfService holds the string denoting the termofservice field in the database.
	FieldTermOfService = "term_of_service"
	// FieldCopyright holds the string denoting the copyright field in the database.
	FieldCopyright = "copyright"
	// FieldOnlineTrainingAgreement holds the string denoting the onlinetrainingagreement field in the database.
	FieldOnlineTrainingAgreement = "online_training_agreement"
	// EdgePortal holds the string denoting the portal edge name in mutations.
	EdgePortal = "portal"
	// Table holds the table name of the portallegal in the database.
	Table = "portal_legals"
	// PortalTable is the table that holds the portal relation/edge.
	PortalTable = "portal_legals"
	// PortalInverseTable is the table name for the Portal entity.
	// It exists in this package in order to avoid circular dependency with the "portal" package.
	PortalInverseTable = "portals"
	// PortalColumn is the table column denoting the portal relation/edge.
	PortalColumn = "portal_legal"
)

// Columns holds all SQL columns for portallegal fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldPrivacyPolicy,
	FieldTermOfService,
	FieldCopyright,
	FieldOnlineTrainingAgreement,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "portal_legals"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"portal_legal",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
