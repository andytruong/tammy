// Code generated by ent, DO NOT EDIT.

package store

import (
	"context"
	"errors"
	"fmt"
	"tammy/pkg/store/predicate"
	"tammy/pkg/store/user"
	"tammy/pkg/store/useremail"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserEmailUpdate is the builder for updating UserEmail entities.
type UserEmailUpdate struct {
	config
	hooks    []Hook
	mutation *UserEmailMutation
}

// Where appends a list predicates to the UserEmailUpdate builder.
func (ueu *UserEmailUpdate) Where(ps ...predicate.UserEmail) *UserEmailUpdate {
	ueu.mutation.Where(ps...)
	return ueu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ueu *UserEmailUpdate) SetUserID(id uint32) *UserEmailUpdate {
	ueu.mutation.SetUserID(id)
	return ueu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ueu *UserEmailUpdate) SetNillableUserID(id *uint32) *UserEmailUpdate {
	if id != nil {
		ueu = ueu.SetUserID(*id)
	}
	return ueu
}

// SetUser sets the "user" edge to the User entity.
func (ueu *UserEmailUpdate) SetUser(u *User) *UserEmailUpdate {
	return ueu.SetUserID(u.ID)
}

// Mutation returns the UserEmailMutation object of the builder.
func (ueu *UserEmailUpdate) Mutation() *UserEmailMutation {
	return ueu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ueu *UserEmailUpdate) ClearUser() *UserEmailUpdate {
	ueu.mutation.ClearUser()
	return ueu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ueu *UserEmailUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ueu.hooks) == 0 {
		affected, err = ueu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserEmailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ueu.mutation = mutation
			affected, err = ueu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ueu.hooks) - 1; i >= 0; i-- {
			if ueu.hooks[i] == nil {
				return 0, fmt.Errorf("store: uninitialized hook (forgotten import store/runtime?)")
			}
			mut = ueu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ueu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ueu *UserEmailUpdate) SaveX(ctx context.Context) int {
	affected, err := ueu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ueu *UserEmailUpdate) Exec(ctx context.Context) error {
	_, err := ueu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ueu *UserEmailUpdate) ExecX(ctx context.Context) {
	if err := ueu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ueu *UserEmailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   useremail.Table,
			Columns: useremail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: useremail.FieldID,
			},
		},
	}
	if ps := ueu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ueu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useremail.UserTable,
			Columns: []string{useremail.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint32,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ueu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useremail.UserTable,
			Columns: []string{useremail.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint32,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ueu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useremail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// UserEmailUpdateOne is the builder for updating a single UserEmail entity.
type UserEmailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserEmailMutation
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ueuo *UserEmailUpdateOne) SetUserID(id uint32) *UserEmailUpdateOne {
	ueuo.mutation.SetUserID(id)
	return ueuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ueuo *UserEmailUpdateOne) SetNillableUserID(id *uint32) *UserEmailUpdateOne {
	if id != nil {
		ueuo = ueuo.SetUserID(*id)
	}
	return ueuo
}

// SetUser sets the "user" edge to the User entity.
func (ueuo *UserEmailUpdateOne) SetUser(u *User) *UserEmailUpdateOne {
	return ueuo.SetUserID(u.ID)
}

// Mutation returns the UserEmailMutation object of the builder.
func (ueuo *UserEmailUpdateOne) Mutation() *UserEmailMutation {
	return ueuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ueuo *UserEmailUpdateOne) ClearUser() *UserEmailUpdateOne {
	ueuo.mutation.ClearUser()
	return ueuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ueuo *UserEmailUpdateOne) Select(field string, fields ...string) *UserEmailUpdateOne {
	ueuo.fields = append([]string{field}, fields...)
	return ueuo
}

// Save executes the query and returns the updated UserEmail entity.
func (ueuo *UserEmailUpdateOne) Save(ctx context.Context) (*UserEmail, error) {
	var (
		err  error
		node *UserEmail
	)
	if len(ueuo.hooks) == 0 {
		node, err = ueuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserEmailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ueuo.mutation = mutation
			node, err = ueuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ueuo.hooks) - 1; i >= 0; i-- {
			if ueuo.hooks[i] == nil {
				return nil, fmt.Errorf("store: uninitialized hook (forgotten import store/runtime?)")
			}
			mut = ueuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ueuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*UserEmail)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserEmailMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ueuo *UserEmailUpdateOne) SaveX(ctx context.Context) *UserEmail {
	node, err := ueuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ueuo *UserEmailUpdateOne) Exec(ctx context.Context) error {
	_, err := ueuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ueuo *UserEmailUpdateOne) ExecX(ctx context.Context) {
	if err := ueuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ueuo *UserEmailUpdateOne) sqlSave(ctx context.Context) (_node *UserEmail, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   useremail.Table,
			Columns: useremail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: useremail.FieldID,
			},
		},
	}
	id, ok := ueuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`store: missing "UserEmail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ueuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, useremail.FieldID)
		for _, f := range fields {
			if !useremail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("store: invalid field %q for query", f)}
			}
			if f != useremail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ueuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ueuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useremail.UserTable,
			Columns: []string{useremail.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint32,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ueuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useremail.UserTable,
			Columns: []string{useremail.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint32,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserEmail{config: ueuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ueuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useremail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
