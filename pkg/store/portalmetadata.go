// Code generated by ent, DO NOT EDIT.

package store

import (
	"fmt"
	"strings"
	"tammy/pkg/store/portal"
	"tammy/pkg/store/portalmetadata"
	"time"

	"entgo.io/ent/dialect/sql"
)

// PortalMetadata is the model entity for the PortalMetadata schema.
type PortalMetadata struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// Kind holds the value of the "kind" field.
	Kind portalmetadata.Kind `json:"kind,omitempty"`
	// Lifecycle holds the value of the "lifecycle" field.
	Lifecycle portalmetadata.Lifecycle `json:"lifecycle,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PortalMetadataQuery when eager-loading is set.
	Edges           PortalMetadataEdges `json:"edges"`
	portal_metadata *uint32
}

// PortalMetadataEdges holds the relations/edges for other nodes in the graph.
type PortalMetadataEdges struct {
	// Portal holds the value of the portal edge.
	Portal *Portal `json:"portal,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PortalOrErr returns the Portal value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PortalMetadataEdges) PortalOrErr() (*Portal, error) {
	if e.loadedTypes[0] {
		if e.Portal == nil {
			// The edge portal was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: portal.Label}
		}
		return e.Portal, nil
	}
	return nil, &NotLoadedError{edge: "portal"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PortalMetadata) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case portalmetadata.FieldID:
			values[i] = new(sql.NullInt64)
		case portalmetadata.FieldKind, portalmetadata.FieldLifecycle:
			values[i] = new(sql.NullString)
		case portalmetadata.FieldCreatedAt, portalmetadata.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case portalmetadata.ForeignKeys[0]: // portal_metadata
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PortalMetadata", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PortalMetadata fields.
func (pm *PortalMetadata) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case portalmetadata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pm.ID = uint32(value.Int64)
		case portalmetadata.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				pm.CreatedAt = value.Time
			}
		case portalmetadata.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				pm.UpdatedAt = value.Time
			}
		case portalmetadata.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				pm.Kind = portalmetadata.Kind(value.String)
			}
		case portalmetadata.FieldLifecycle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lifecycle", values[i])
			} else if value.Valid {
				pm.Lifecycle = portalmetadata.Lifecycle(value.String)
			}
		case portalmetadata.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field portal_metadata", value)
			} else if value.Valid {
				pm.portal_metadata = new(uint32)
				*pm.portal_metadata = uint32(value.Int64)
			}
		}
	}
	return nil
}

// QueryPortal queries the "portal" edge of the PortalMetadata entity.
func (pm *PortalMetadata) QueryPortal() *PortalQuery {
	return (&PortalMetadataClient{config: pm.config}).QueryPortal(pm)
}

// Update returns a builder for updating this PortalMetadata.
// Note that you need to call PortalMetadata.Unwrap() before calling this method if this PortalMetadata
// was returned from a transaction, and the transaction was committed or rolled back.
func (pm *PortalMetadata) Update() *PortalMetadataUpdateOne {
	return (&PortalMetadataClient{config: pm.config}).UpdateOne(pm)
}

// Unwrap unwraps the PortalMetadata entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pm *PortalMetadata) Unwrap() *PortalMetadata {
	_tx, ok := pm.config.driver.(*txDriver)
	if !ok {
		panic("store: PortalMetadata is not a transactional entity")
	}
	pm.config.driver = _tx.drv
	return pm
}

// String implements the fmt.Stringer.
func (pm *PortalMetadata) String() string {
	var builder strings.Builder
	builder.WriteString("PortalMetadata(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pm.ID))
	builder.WriteString("createdAt=")
	builder.WriteString(pm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(pm.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(fmt.Sprintf("%v", pm.Kind))
	builder.WriteString(", ")
	builder.WriteString("lifecycle=")
	builder.WriteString(fmt.Sprintf("%v", pm.Lifecycle))
	builder.WriteByte(')')
	return builder.String()
}

// PortalMetadataSlice is a parsable slice of PortalMetadata.
type PortalMetadataSlice []*PortalMetadata

func (pm PortalMetadataSlice) config(cfg config) {
	for _i := range pm {
		pm[_i].config = cfg
	}
}
