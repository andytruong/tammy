// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AccountsColumns holds the columns for the "accounts" table.
	AccountsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint32, Increment: true},
		{Name: "user_id", Type: field.TypeUint32},
		{Name: "is_active", Type: field.TypeBool},
		{Name: "is_blocked", Type: field.TypeBool},
		{Name: "user_accounts", Type: field.TypeUint32},
	}
	// AccountsTable holds the schema information for the "accounts" table.
	AccountsTable = &schema.Table{
		Name:       "accounts",
		Columns:    AccountsColumns,
		PrimaryKey: []*schema.Column{AccountsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "accounts_users_accounts",
				Columns:    []*schema.Column{AccountsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// AccountFieldsColumns holds the columns for the "account_fields" table.
	AccountFieldsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint32, Increment: true},
		{Name: "fid", Type: field.TypeUint32},
		{Name: "key", Type: field.TypeString},
		{Name: "value", Type: field.TypeString},
		{Name: "account_fields", Type: field.TypeUint32},
	}
	// AccountFieldsTable holds the schema information for the "account_fields" table.
	AccountFieldsTable = &schema.Table{
		Name:       "account_fields",
		Columns:    AccountFieldsColumns,
		PrimaryKey: []*schema.Column{AccountFieldsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "account_fields_accounts_fields",
				Columns:    []*schema.Column{AccountFieldsColumns[4]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint32, Increment: true},
		{Name: "is_active", Type: field.TypeBool, Default: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// UserEmailsColumns holds the columns for the "user_emails" table.
	UserEmailsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint32, Increment: true},
		{Name: "value", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "is_verified", Type: field.TypeBool},
		{Name: "user_emails", Type: field.TypeUint32, Nullable: true},
	}
	// UserEmailsTable holds the schema information for the "user_emails" table.
	UserEmailsTable = &schema.Table{
		Name:       "user_emails",
		Columns:    UserEmailsColumns,
		PrimaryKey: []*schema.Column{UserEmailsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_emails_users_emails",
				Columns:    []*schema.Column{UserEmailsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UserPasswordsColumns holds the columns for the "user_passwords" table.
	UserPasswordsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint32, Increment: true},
		{Name: "user_id", Type: field.TypeUint32},
		{Name: "hashed_value", Type: field.TypeString},
		{Name: "is_active", Type: field.TypeBool},
		{Name: "created_at", Type: field.TypeUint32},
		{Name: "user_password", Type: field.TypeUint32, Unique: true},
	}
	// UserPasswordsTable holds the schema information for the "user_passwords" table.
	UserPasswordsTable = &schema.Table{
		Name:       "user_passwords",
		Columns:    UserPasswordsColumns,
		PrimaryKey: []*schema.Column{UserPasswordsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_passwords_users_password",
				Columns:    []*schema.Column{UserPasswordsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AccountsTable,
		AccountFieldsTable,
		UsersTable,
		UserEmailsTable,
		UserPasswordsTable,
	}
)

func init() {
	AccountsTable.ForeignKeys[0].RefTable = UsersTable
	AccountFieldsTable.ForeignKeys[0].RefTable = AccountsTable
	UserEmailsTable.ForeignKeys[0].RefTable = UsersTable
	UserPasswordsTable.ForeignKeys[0].RefTable = UsersTable
}
