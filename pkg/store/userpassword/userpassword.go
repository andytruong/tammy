// Code generated by ent, DO NOT EDIT.

package userpassword

const (
	// Label holds the string label denoting the userpassword type in the database.
	Label = "user_password"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserId holds the string denoting the userid field in the database.
	FieldUserId = "user_id"
	// FieldHashedValue holds the string denoting the hashedvalue field in the database.
	FieldHashedValue = "hashed_value"
	// FieldIsActive holds the string denoting the isactive field in the database.
	FieldIsActive = "is_active"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the userpassword in the database.
	Table = "user_passwords"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "user_passwords"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_password"
)

// Columns holds all SQL columns for userpassword fields.
var Columns = []string{
	FieldID,
	FieldUserId,
	FieldHashedValue,
	FieldIsActive,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "user_passwords"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_password",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
